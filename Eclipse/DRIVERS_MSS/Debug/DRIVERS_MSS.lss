
DRIVERS_MSS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  00002f78  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001d2  008001d2  0000317e  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff1  00000000  00000000  00005afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000094d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000bcac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000be8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c193  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <main>
      8a:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ec       	ldi	r22, 0xC6	; 198
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e2 53       	subi	r30, 0x32	; 50
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_16>:
#include "ADC.h"
volatile uint16 ADC_RES ;
volatile uint8 ADC_ST   = 0;

ISR(ADC_vect)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	ADC_RES = ADC;
     f04:	e4 e2       	ldi	r30, 0x24	; 36
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	91 81       	ldd	r25, Z+1	; 0x01
     f0c:	90 93 d4 01 	sts	0x01D4, r25
     f10:	80 93 d3 01 	sts	0x01D3, r24
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <ADC_INIT>:

void ADC_INIT(const ADC_TYPE *ptr_type)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <ADC_INIT+0x6>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
	ADC_ST=(uint8)(ptr_type->adc_st);
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	80 93 d2 01 	sts	0x01D2, r24
	ADMUX=0;
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	10 82       	st	Z, r1
	ADMUX=( (ADMUX & 0x3f)|((ptr_type->adc_rv & 0x03)<<6) );
     f48:	a7 e2       	ldi	r26, 0x27	; 39
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e7 e2       	ldi	r30, 0x27	; 39
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	28 2f       	mov	r18, r24
     f54:	2f 73       	andi	r18, 0x3F	; 63
     f56:	e9 81       	ldd	r30, Y+1	; 0x01
     f58:	fa 81       	ldd	r31, Y+2	; 0x02
     f5a:	80 81       	ld	r24, Z
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	00 24       	eor	r0, r0
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	07 94       	ror	r0
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	07 94       	ror	r0
     f6e:	98 2f       	mov	r25, r24
     f70:	80 2d       	mov	r24, r0
     f72:	82 2b       	or	r24, r18
     f74:	8c 93       	st	X, r24
	ADC_EN;
     f76:	e6 e2       	ldi	r30, 0x26	; 38
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	80 83       	st	Z, r24
	ADCSRA|= ((ADCSRA & 0xF8)| ((ptr_type->adc_ps)&0x07) );
     f7e:	a6 e2       	ldi	r26, 0x26	; 38
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e6 e2       	ldi	r30, 0x26	; 38
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	e6 e2       	ldi	r30, 0x26	; 38
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	98 2f       	mov	r25, r24
     f92:	98 7f       	andi	r25, 0xF8	; 248
     f94:	e9 81       	ldd	r30, Y+1	; 0x01
     f96:	fa 81       	ldd	r31, Y+2	; 0x02
     f98:	81 81       	ldd	r24, Z+1	; 0x01
     f9a:	87 70       	andi	r24, 0x07	; 7
     f9c:	89 2b       	or	r24, r25
     f9e:	82 2b       	or	r24, r18
     fa0:	8c 93       	st	X, r24
	if(ptr_type->adc_st==POOL)
     fa2:	e9 81       	ldd	r30, Y+1	; 0x01
     fa4:	fa 81       	ldd	r31, Y+2	; 0x02
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	88 23       	and	r24, r24
     faa:	41 f4       	brne	.+16     	; 0xfbc <ADC_INIT+0x92>
	{
		ADC_INT_DIS;                    //DISABLE INTERRUPT
     fac:	a6 e2       	ldi	r26, 0x26	; 38
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e6 e2       	ldi	r30, 0x26	; 38
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	87 7f       	andi	r24, 0xF7	; 247
     fb8:	8c 93       	st	X, r24
     fba:	07 c0       	rjmp	.+14     	; 0xfca <ADC_INIT+0xa0>
	}
	else
	{
		ADC_INT_EN;                     //ENABLE INTERRUPT
     fbc:	a6 e2       	ldi	r26, 0x26	; 38
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e6 e2       	ldi	r30, 0x26	; 38
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	8c 93       	st	X, r24
	}

}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <ADC_READ>:
void ADC_READ(ADC_CHANNEL ch)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
	ch&=0x07;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	87 70       	andi	r24, 0x07	; 7
     fe4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0xE0;
     fe6:	a7 e2       	ldi	r26, 0x27	; 39
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e7 e2       	ldi	r30, 0x27	; 39
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 7e       	andi	r24, 0xE0	; 224
     ff2:	8c 93       	st	X, r24
	ADMUX|=ch;
     ff4:	a7 e2       	ldi	r26, 0x27	; 39
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e7 e2       	ldi	r30, 0x27	; 39
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	90 81       	ld	r25, Z
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	89 2b       	or	r24, r25
    1002:	8c 93       	st	X, r24
	ADC_START;
    1004:	a6 e2       	ldi	r26, 0x26	; 38
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e6 e2       	ldi	r30, 0x26	; 38
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 64       	ori	r24, 0x40	; 64
    1010:	8c 93       	st	X, r24
	if(ADC_ST ==POOL)
    1012:	80 91 d2 01 	lds	r24, 0x01D2
    1016:	88 23       	and	r24, r24
    1018:	c1 f4       	brne	.+48     	; 0x104a <ADC_READ+0x76>
	{
	while ( BIT_IS_CLEAR(ADCSRA,ADIF) ){}
    101a:	e6 e2       	ldi	r30, 0x26	; 38
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	80 71       	andi	r24, 0x10	; 16
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	b9 f3       	breq	.-18     	; 0x101a <ADC_READ+0x46>
	SET_BIT(ADCSRA,ADIF);
    102c:	a6 e2       	ldi	r26, 0x26	; 38
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e6 e2       	ldi	r30, 0x26	; 38
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	80 61       	ori	r24, 0x10	; 16
    1038:	8c 93       	st	X, r24
	ADC_RES=ADC;
    103a:	e4 e2       	ldi	r30, 0x24	; 36
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	90 93 d4 01 	sts	0x01D4, r25
    1046:	80 93 d3 01 	sts	0x01D3, r24
	else
	{

	}

}
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <DC_MOTOR_INIT>:

#include "DC_MOTOR.h"


void DC_MOTOR_INIT()
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	DDR(DC_M_PORT,DC_M_PIN1,OUTPUT);
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
	PORT(DC_M_PORT,DC_M_PIN1,OFF);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>

	DDR(DC_M_PORT,DC_M_PIN2,OUTPUT);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
}
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <DC_MOTOR>:

void DC_MOTOR(MOTOR_STATE state,uint8 speed)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <DC_MOTOR+0x6>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DC_MOTOR+0x8>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3c 83       	std	Y+4, r19	; 0x04
    10a0:	2b 83       	std	Y+3, r18	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	a1 f0       	breq	.+40     	; 0x10d4 <DC_MOTOR+0x4c>
    10ac:	2b 81       	ldd	r18, Y+3	; 0x03
    10ae:	3c 81       	ldd	r19, Y+4	; 0x04
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	e9 f0       	breq	.+58     	; 0x10f0 <DC_MOTOR+0x68>
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	39 f5       	brne	.+78     	; 0x110c <DC_MOTOR+0x84>
	{
	case m_off:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    10d2:	26 c0       	rjmp	.+76     	; 0x1120 <DC_MOTOR+0x98>
		break;
	case m_on_cw:
		PORT(DC_M_PORT,DC_M_PIN1,ON);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	41 e0       	ldi	r20, 0x01	; 1
    10da:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PWM_Timer0_Start(speed);
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	0e 94 bc 13 	call	0x2778	; 0x2778 <PWM_Timer0_Start>
    10ee:	18 c0       	rjmp	.+48     	; 0x1120 <DC_MOTOR+0x98>
		break;

	case m_on_acw:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,ON);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PWM_Timer0_Start(speed);
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	0e 94 bc 13 	call	0x2778	; 0x2778 <PWM_Timer0_Start>
    110a:	0a c0       	rjmp	.+20     	; 0x1120 <DC_MOTOR+0x98>
		break;
	default:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		break;
	}
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DDR>:
 *      Author: Admin
 */
#include "GPIO2.h"

void DDR(ports po,pins pi,state st)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	65 97       	sbiw	r28, 0x15	; 21
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	6a 83       	std	Y+2, r22	; 0x02
    1146:	4b 83       	std	Y+3, r20	; 0x03
	switch(po)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 8b       	std	Y+21, r19	; 0x15
    1150:	2c 8b       	std	Y+20, r18	; 0x14
    1152:	8c 89       	ldd	r24, Y+20	; 0x14
    1154:	9d 89       	ldd	r25, Y+21	; 0x15
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <DDR+0x30>
    115c:	6a c0       	rjmp	.+212    	; 0x1232 <DDR+0x104>
    115e:	2c 89       	ldd	r18, Y+20	; 0x14
    1160:	3d 89       	ldd	r19, Y+21	; 0x15
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	2c f4       	brge	.+10     	; 0x1172 <DDR+0x44>
    1168:	8c 89       	ldd	r24, Y+20	; 0x14
    116a:	9d 89       	ldd	r25, Y+21	; 0x15
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	71 f0       	breq	.+28     	; 0x118c <DDR+0x5e>
    1170:	58 c1       	rjmp	.+688    	; 0x1422 <DDR+0x2f4>
    1172:	2c 89       	ldd	r18, Y+20	; 0x14
    1174:	3d 89       	ldd	r19, Y+21	; 0x15
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DDR+0x50>
    117c:	ad c0       	rjmp	.+346    	; 0x12d8 <DDR+0x1aa>
    117e:	8c 89       	ldd	r24, Y+20	; 0x14
    1180:	9d 89       	ldd	r25, Y+21	; 0x15
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <DDR+0x5c>
    1188:	fa c0       	rjmp	.+500    	; 0x137e <DDR+0x250>
    118a:	4b c1       	rjmp	.+662    	; 0x1422 <DDR+0x2f4>
	{
	case PA:
		if (pi==total)
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	88 30       	cpi	r24, 0x08	; 8
    1190:	c1 f4       	brne	.+48     	; 0x11c2 <DDR+0x94>
		{
			switch (st)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3b 8b       	std	Y+19, r19	; 0x13
    119a:	2a 8b       	std	Y+18, r18	; 0x12
    119c:	8a 89       	ldd	r24, Y+18	; 0x12
    119e:	9b 89       	ldd	r25, Y+19	; 0x13
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	31 f0       	breq	.+12     	; 0x11b0 <DDR+0x82>
    11a4:	2a 89       	ldd	r18, Y+18	; 0x12
    11a6:	3b 89       	ldd	r19, Y+19	; 0x13
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	31 05       	cpc	r19, r1
    11ac:	29 f0       	breq	.+10     	; 0x11b8 <DDR+0x8a>
    11ae:	39 c1       	rjmp	.+626    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT:  DDRA=0x00;  break;
    11b0:	ea e3       	ldi	r30, 0x3A	; 58
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	10 82       	st	Z, r1
    11b6:	35 c1       	rjmp	.+618    	; 0x1422 <DDR+0x2f4>
				case OUTPUT: DDRA=0xFF;  break;
    11b8:	ea e3       	ldi	r30, 0x3A	; 58
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	80 83       	st	Z, r24
    11c0:	30 c1       	rjmp	.+608    	; 0x1422 <DDR+0x2f4>
			}
		}
		else
		{
			switch (st)
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	39 8b       	std	Y+17, r19	; 0x11
    11ca:	28 8b       	std	Y+16, r18	; 0x10
    11cc:	88 89       	ldd	r24, Y+16	; 0x10
    11ce:	99 89       	ldd	r25, Y+17	; 0x11
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	31 f0       	breq	.+12     	; 0x11e0 <DDR+0xb2>
    11d4:	28 89       	ldd	r18, Y+16	; 0x10
    11d6:	39 89       	ldd	r19, Y+17	; 0x11
    11d8:	21 30       	cpi	r18, 0x01	; 1
    11da:	31 05       	cpc	r19, r1
    11dc:	b1 f0       	breq	.+44     	; 0x120a <DDR+0xdc>
    11de:	21 c1       	rjmp	.+578    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT:   DDRA&=~(1<<pi); break;
    11e0:	aa e3       	ldi	r26, 0x3A	; 58
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DDR+0xd0>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DDR+0xcc>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	0c c1       	rjmp	.+536    	; 0x1422 <DDR+0x2f4>
				case OUTPUT:  DDRA|=(1<<pi);  break;
    120a:	aa e3       	ldi	r26, 0x3A	; 58
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DDR+0xfa>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DDR+0xf6>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	f8 c0       	rjmp	.+496    	; 0x1422 <DDR+0x2f4>
			}
		}
	break;

	case PB:
		if (pi==total)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	c1 f4       	brne	.+48     	; 0x1268 <DDR+0x13a>
		{
			switch (st)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3f 87       	std	Y+15, r19	; 0x0f
    1240:	2e 87       	std	Y+14, r18	; 0x0e
    1242:	8e 85       	ldd	r24, Y+14	; 0x0e
    1244:	9f 85       	ldd	r25, Y+15	; 0x0f
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	31 f0       	breq	.+12     	; 0x1256 <DDR+0x128>
    124a:	2e 85       	ldd	r18, Y+14	; 0x0e
    124c:	3f 85       	ldd	r19, Y+15	; 0x0f
    124e:	21 30       	cpi	r18, 0x01	; 1
    1250:	31 05       	cpc	r19, r1
    1252:	29 f0       	breq	.+10     	; 0x125e <DDR+0x130>
    1254:	e6 c0       	rjmp	.+460    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT:  DDRB=0x00; break;
    1256:	e7 e3       	ldi	r30, 0x37	; 55
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1
    125c:	e2 c0       	rjmp	.+452    	; 0x1422 <DDR+0x2f4>
				case OUTPUT: DDRB=0xFF;  break;
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	80 83       	st	Z, r24
    1266:	dd c0       	rjmp	.+442    	; 0x1422 <DDR+0x2f4>
			}
		}
		else
		{
			switch (st)
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3d 87       	std	Y+13, r19	; 0x0d
    1270:	2c 87       	std	Y+12, r18	; 0x0c
    1272:	8c 85       	ldd	r24, Y+12	; 0x0c
    1274:	9d 85       	ldd	r25, Y+13	; 0x0d
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	31 f0       	breq	.+12     	; 0x1286 <DDR+0x158>
    127a:	2c 85       	ldd	r18, Y+12	; 0x0c
    127c:	3d 85       	ldd	r19, Y+13	; 0x0d
    127e:	21 30       	cpi	r18, 0x01	; 1
    1280:	31 05       	cpc	r19, r1
    1282:	b1 f0       	breq	.+44     	; 0x12b0 <DDR+0x182>
    1284:	ce c0       	rjmp	.+412    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT: DDRB&=~(1<<pi); break;
    1286:	a7 e3       	ldi	r26, 0x37	; 55
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e7 e3       	ldi	r30, 0x37	; 55
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DDR+0x176>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DDR+0x172>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	b9 c0       	rjmp	.+370    	; 0x1422 <DDR+0x2f4>
				case OUTPUT:  DDRB|=(1<<pi);  break;
    12b0:	a7 e3       	ldi	r26, 0x37	; 55
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e7 e3       	ldi	r30, 0x37	; 55
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DDR+0x1a0>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DDR+0x19c>
    12d2:	84 2b       	or	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	a5 c0       	rjmp	.+330    	; 0x1422 <DDR+0x2f4>
			}
		}
	break;

	case PC:
		if (pi==total)
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	88 30       	cpi	r24, 0x08	; 8
    12dc:	c1 f4       	brne	.+48     	; 0x130e <DDR+0x1e0>
		{
			switch (st)
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3b 87       	std	Y+11, r19	; 0x0b
    12e6:	2a 87       	std	Y+10, r18	; 0x0a
    12e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	31 f0       	breq	.+12     	; 0x12fc <DDR+0x1ce>
    12f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    12f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    12f4:	21 30       	cpi	r18, 0x01	; 1
    12f6:	31 05       	cpc	r19, r1
    12f8:	29 f0       	breq	.+10     	; 0x1304 <DDR+0x1d6>
    12fa:	93 c0       	rjmp	.+294    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT:  DDRC=0x00; break;
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	10 82       	st	Z, r1
    1302:	8f c0       	rjmp	.+286    	; 0x1422 <DDR+0x2f4>
				case OUTPUT: DDRC=0xFF;  break;
    1304:	e4 e3       	ldi	r30, 0x34	; 52
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	80 83       	st	Z, r24
    130c:	8a c0       	rjmp	.+276    	; 0x1422 <DDR+0x2f4>
			}
		}
		else
		{
			switch (st)
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	39 87       	std	Y+9, r19	; 0x09
    1316:	28 87       	std	Y+8, r18	; 0x08
    1318:	88 85       	ldd	r24, Y+8	; 0x08
    131a:	99 85       	ldd	r25, Y+9	; 0x09
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	31 f0       	breq	.+12     	; 0x132c <DDR+0x1fe>
    1320:	28 85       	ldd	r18, Y+8	; 0x08
    1322:	39 85       	ldd	r19, Y+9	; 0x09
    1324:	21 30       	cpi	r18, 0x01	; 1
    1326:	31 05       	cpc	r19, r1
    1328:	b1 f0       	breq	.+44     	; 0x1356 <DDR+0x228>
    132a:	7b c0       	rjmp	.+246    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT: DDRC&=~(1<<pi); break;
    132c:	a4 e3       	ldi	r26, 0x34	; 52
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e4 e3       	ldi	r30, 0x34	; 52
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DDR+0x21c>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DDR+0x218>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	66 c0       	rjmp	.+204    	; 0x1422 <DDR+0x2f4>
				case OUTPUT:  DDRC|=(1<<pi);  break;
    1356:	a4 e3       	ldi	r26, 0x34	; 52
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e4 e3       	ldi	r30, 0x34	; 52
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DDR+0x246>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DDR+0x242>
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	52 c0       	rjmp	.+164    	; 0x1422 <DDR+0x2f4>
			}
		}
	break;

	case PD:
		if (pi==total)
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	88 30       	cpi	r24, 0x08	; 8
    1382:	c1 f4       	brne	.+48     	; 0x13b4 <DDR+0x286>
		{
			switch (st)
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3f 83       	std	Y+7, r19	; 0x07
    138c:	2e 83       	std	Y+6, r18	; 0x06
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	9f 81       	ldd	r25, Y+7	; 0x07
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	31 f0       	breq	.+12     	; 0x13a2 <DDR+0x274>
    1396:	2e 81       	ldd	r18, Y+6	; 0x06
    1398:	3f 81       	ldd	r19, Y+7	; 0x07
    139a:	21 30       	cpi	r18, 0x01	; 1
    139c:	31 05       	cpc	r19, r1
    139e:	29 f0       	breq	.+10     	; 0x13aa <DDR+0x27c>
    13a0:	40 c0       	rjmp	.+128    	; 0x1422 <DDR+0x2f4>
			{
				case INPUT: DDRD=0x00; break;
    13a2:	e1 e3       	ldi	r30, 0x31	; 49
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	10 82       	st	Z, r1
    13a8:	3c c0       	rjmp	.+120    	; 0x1422 <DDR+0x2f4>
				case OUTPUT: DDRD=0xFF;  break;
    13aa:	e1 e3       	ldi	r30, 0x31	; 49
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	80 83       	st	Z, r24
    13b2:	37 c0       	rjmp	.+110    	; 0x1422 <DDR+0x2f4>
			}
		}
		else
		{
			switch (st)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <DDR+0x2a4>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	21 30       	cpi	r18, 0x01	; 1
    13cc:	31 05       	cpc	r19, r1
    13ce:	b1 f0       	breq	.+44     	; 0x13fc <DDR+0x2ce>
    13d0:	28 c0       	rjmp	.+80     	; 0x1422 <DDR+0x2f4>
			{
				case INPUT: DDRD&=~(1<<pi); break;
    13d2:	a1 e3       	ldi	r26, 0x31	; 49
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e1 e3       	ldi	r30, 0x31	; 49
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DDR+0x2c2>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DDR+0x2be>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <DDR+0x2f4>
				case OUTPUT:  DDRD|=(1<<pi);  break;
    13fc:	a1 e3       	ldi	r26, 0x31	; 49
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e1 e3       	ldi	r30, 0x31	; 49
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DDR+0x2ec>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DDR+0x2e8>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
			}
		}
	break;
	}

}
    1422:	65 96       	adiw	r28, 0x15	; 21
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <PORT>:
void PORT(ports po,pins pi,uint8 data)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	2d 97       	sbiw	r28, 0x0d	; 13
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	6a 83       	std	Y+2, r22	; 0x02
    144c:	4b 83       	std	Y+3, r20	; 0x03
	switch(po)
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 87       	std	Y+13, r19	; 0x0d
    1456:	2c 87       	std	Y+12, r18	; 0x0c
    1458:	8c 85       	ldd	r24, Y+12	; 0x0c
    145a:	9d 85       	ldd	r25, Y+13	; 0x0d
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <PORT+0x30>
    1462:	57 c0       	rjmp	.+174    	; 0x1512 <PORT+0xde>
    1464:	2c 85       	ldd	r18, Y+12	; 0x0c
    1466:	3d 85       	ldd	r19, Y+13	; 0x0d
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <PORT+0x44>
    146e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1470:	9d 85       	ldd	r25, Y+13	; 0x0d
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	71 f0       	breq	.+28     	; 0x1492 <PORT+0x5e>
    1476:	0c c1       	rjmp	.+536    	; 0x1690 <PORT+0x25c>
    1478:	2c 85       	ldd	r18, Y+12	; 0x0c
    147a:	3d 85       	ldd	r19, Y+13	; 0x0d
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <PORT+0x50>
    1482:	87 c0       	rjmp	.+270    	; 0x1592 <PORT+0x15e>
    1484:	8c 85       	ldd	r24, Y+12	; 0x0c
    1486:	9d 85       	ldd	r25, Y+13	; 0x0d
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	91 05       	cpc	r25, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <PORT+0x5c>
    148e:	c1 c0       	rjmp	.+386    	; 0x1612 <PORT+0x1de>
    1490:	ff c0       	rjmp	.+510    	; 0x1690 <PORT+0x25c>
	{
	case PA:
		if (pi==total)
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 30       	cpi	r24, 0x08	; 8
    1496:	29 f4       	brne	.+10     	; 0x14a2 <PORT+0x6e>
		{

			PORTA=data;
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	80 83       	st	Z, r24
    14a0:	f7 c0       	rjmp	.+494    	; 0x1690 <PORT+0x25c>
			break;
		}
		else
		{
			switch (data)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3b 87       	std	Y+11, r19	; 0x0b
    14aa:	2a 87       	std	Y+10, r18	; 0x0a
    14ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <PORT+0x8c>
    14b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    14b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    14b8:	21 30       	cpi	r18, 0x01	; 1
    14ba:	31 05       	cpc	r19, r1
    14bc:	b1 f0       	breq	.+44     	; 0x14ea <PORT+0xb6>
    14be:	e8 c0       	rjmp	.+464    	; 0x1690 <PORT+0x25c>
			{
				case OFF:
				PORTA&=~(1<<pi);
    14c0:	ab e3       	ldi	r26, 0x3B	; 59
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <PORT+0xaa>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <PORT+0xa6>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	d3 c0       	rjmp	.+422    	; 0x1690 <PORT+0x25c>
				break;
				case ON:
				PORTA|=(1<<pi);
    14ea:	ab e3       	ldi	r26, 0x3B	; 59
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <PORT+0xd4>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <PORT+0xd0>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	bf c0       	rjmp	.+382    	; 0x1690 <PORT+0x25c>
			}
		}
	break;

	case PB:
		if (pi==total)
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	88 30       	cpi	r24, 0x08	; 8
    1516:	29 f4       	brne	.+10     	; 0x1522 <PORT+0xee>
		{

		 PORTB=data;
    1518:	e8 e3       	ldi	r30, 0x38	; 56
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	80 83       	st	Z, r24
    1520:	b7 c0       	rjmp	.+366    	; 0x1690 <PORT+0x25c>
		 break;

		}
		else
		{
			switch (data)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	39 87       	std	Y+9, r19	; 0x09
    152a:	28 87       	std	Y+8, r18	; 0x08
    152c:	88 85       	ldd	r24, Y+8	; 0x08
    152e:	99 85       	ldd	r25, Y+9	; 0x09
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	31 f0       	breq	.+12     	; 0x1540 <PORT+0x10c>
    1534:	28 85       	ldd	r18, Y+8	; 0x08
    1536:	39 85       	ldd	r19, Y+9	; 0x09
    1538:	21 30       	cpi	r18, 0x01	; 1
    153a:	31 05       	cpc	r19, r1
    153c:	b1 f0       	breq	.+44     	; 0x156a <PORT+0x136>
    153e:	a8 c0       	rjmp	.+336    	; 0x1690 <PORT+0x25c>
			{
				case OFF: PORTB&=~(1<<pi); break;
    1540:	a8 e3       	ldi	r26, 0x38	; 56
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e8 e3       	ldi	r30, 0x38	; 56
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <PORT+0x12a>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <PORT+0x126>
    1562:	80 95       	com	r24
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	93 c0       	rjmp	.+294    	; 0x1690 <PORT+0x25c>
				case ON:  PORTB|=(1<<pi);  break;
    156a:	a8 e3       	ldi	r26, 0x38	; 56
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <PORT+0x154>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <PORT+0x150>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	7f c0       	rjmp	.+254    	; 0x1690 <PORT+0x25c>
			}
		}
	break;

	case PC:
		if (pi==total)
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	29 f4       	brne	.+10     	; 0x15a2 <PORT+0x16e>
		{

		 PORTC=data;
    1598:	e5 e3       	ldi	r30, 0x35	; 53
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	80 83       	st	Z, r24
    15a0:	77 c0       	rjmp	.+238    	; 0x1690 <PORT+0x25c>
		 break;

		}
		else
		{
			switch (data)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3f 83       	std	Y+7, r19	; 0x07
    15aa:	2e 83       	std	Y+6, r18	; 0x06
    15ac:	8e 81       	ldd	r24, Y+6	; 0x06
    15ae:	9f 81       	ldd	r25, Y+7	; 0x07
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <PORT+0x18c>
    15b4:	2e 81       	ldd	r18, Y+6	; 0x06
    15b6:	3f 81       	ldd	r19, Y+7	; 0x07
    15b8:	21 30       	cpi	r18, 0x01	; 1
    15ba:	31 05       	cpc	r19, r1
    15bc:	b1 f0       	breq	.+44     	; 0x15ea <PORT+0x1b6>
    15be:	68 c0       	rjmp	.+208    	; 0x1690 <PORT+0x25c>
			{
				case OFF: PORTC&=~(1<<pi); break;
    15c0:	a5 e3       	ldi	r26, 0x35	; 53
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e3       	ldi	r30, 0x35	; 53
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <PORT+0x1aa>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <PORT+0x1a6>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	53 c0       	rjmp	.+166    	; 0x1690 <PORT+0x25c>
				case ON:  PORTC|=(1<<pi);  break;
    15ea:	a5 e3       	ldi	r26, 0x35	; 53
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e3       	ldi	r30, 0x35	; 53
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <PORT+0x1d4>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <PORT+0x1d0>
    160c:	84 2b       	or	r24, r20
    160e:	8c 93       	st	X, r24
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <PORT+0x25c>
			}
		}
	break;

	case PD:
		if (pi==total)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	29 f4       	brne	.+10     	; 0x1622 <PORT+0x1ee>
		{

		 PORTD=data;
    1618:	e2 e3       	ldi	r30, 0x32	; 50
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	80 83       	st	Z, r24
    1620:	37 c0       	rjmp	.+110    	; 0x1690 <PORT+0x25c>
		 break;

		}
		else
		{
			switch (data)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3d 83       	std	Y+5, r19	; 0x05
    162a:	2c 83       	std	Y+4, r18	; 0x04
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	31 f0       	breq	.+12     	; 0x1640 <PORT+0x20c>
    1634:	2c 81       	ldd	r18, Y+4	; 0x04
    1636:	3d 81       	ldd	r19, Y+5	; 0x05
    1638:	21 30       	cpi	r18, 0x01	; 1
    163a:	31 05       	cpc	r19, r1
    163c:	b1 f0       	breq	.+44     	; 0x166a <PORT+0x236>
    163e:	28 c0       	rjmp	.+80     	; 0x1690 <PORT+0x25c>
			{
				case OFF: PORTD&=~(1<<pi); break;
    1640:	a2 e3       	ldi	r26, 0x32	; 50
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e2 e3       	ldi	r30, 0x32	; 50
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <PORT+0x22a>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <PORT+0x226>
    1662:	80 95       	com	r24
    1664:	84 23       	and	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <PORT+0x25c>
				case ON:  PORTD|=(1<<pi);  break;
    166a:	a2 e3       	ldi	r26, 0x32	; 50
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e2 e3       	ldi	r30, 0x32	; 50
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <PORT+0x254>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <PORT+0x250>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
			}
		}
	break;
	}
}
    1690:	2d 96       	adiw	r28, 0x0d	; 13
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <PIN>:
uint8 PIN(ports po,pins pi)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <PIN+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <PIN+0x8>
    16aa:	0f 92       	push	r0
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	8a 83       	std	Y+2, r24	; 0x02
    16b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 RET;
	switch(po)
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3d 83       	std	Y+5, r19	; 0x05
    16bc:	2c 83       	std	Y+4, r18	; 0x04
    16be:	4c 81       	ldd	r20, Y+4	; 0x04
    16c0:	5d 81       	ldd	r21, Y+5	; 0x05
    16c2:	41 30       	cpi	r20, 0x01	; 1
    16c4:	51 05       	cpc	r21, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <PIN+0x28>
    16c8:	3e c0       	rjmp	.+124    	; 0x1746 <PIN+0xa4>
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	91 05       	cpc	r25, r1
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <PIN+0x3e>
    16d4:	2c 81       	ldd	r18, Y+4	; 0x04
    16d6:	3d 81       	ldd	r19, Y+5	; 0x05
    16d8:	21 15       	cp	r18, r1
    16da:	31 05       	cpc	r19, r1
    16dc:	71 f0       	breq	.+28     	; 0x16fa <PIN+0x58>
    16de:	a4 c0       	rjmp	.+328    	; 0x1828 <PIN+0x186>
    16e0:	4c 81       	ldd	r20, Y+4	; 0x04
    16e2:	5d 81       	ldd	r21, Y+5	; 0x05
    16e4:	42 30       	cpi	r20, 0x02	; 2
    16e6:	51 05       	cpc	r21, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <PIN+0x4a>
    16ea:	53 c0       	rjmp	.+166    	; 0x1792 <PIN+0xf0>
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <PIN+0x56>
    16f6:	73 c0       	rjmp	.+230    	; 0x17de <PIN+0x13c>
    16f8:	97 c0       	rjmp	.+302    	; 0x1828 <PIN+0x186>
	{
	case PA:
		if(pi==total)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	88 30       	cpi	r24, 0x08	; 8
    16fe:	29 f4       	brne	.+10     	; 0x170a <PIN+0x68>
		{
		RET=PINA;
    1700:	e9 e3       	ldi	r30, 0x39	; 57
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	8f c0       	rjmp	.+286    	; 0x1828 <PIN+0x186>
		}
		else
		{
		RET=GET_BIT(PINA,pi);
    170a:	e9 e3       	ldi	r30, 0x39	; 57
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <PIN+0x82>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	2a 95       	dec	r18
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <PIN+0x7e>
    1728:	9a 01       	movw	r18, r20
    172a:	28 23       	and	r18, r24
    172c:	39 23       	and	r19, r25
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <PIN+0x9a>
    1738:	55 95       	asr	r21
    173a:	47 95       	ror	r20
    173c:	8a 95       	dec	r24
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <PIN+0x96>
    1740:	ca 01       	movw	r24, r20
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	71 c0       	rjmp	.+226    	; 0x1828 <PIN+0x186>
		}
		break;
	case PB:
		if(pi==total)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 30       	cpi	r24, 0x08	; 8
    174a:	29 f4       	brne	.+10     	; 0x1756 <PIN+0xb4>
		{
		RET=PINB;
    174c:	e6 e3       	ldi	r30, 0x36	; 54
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	69 c0       	rjmp	.+210    	; 0x1828 <PIN+0x186>
		}
		else
		{
		RET=GET_BIT(PINB,pi);  //PINB&(1<<pi);
    1756:	e6 e3       	ldi	r30, 0x36	; 54
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <PIN+0xce>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	2a 95       	dec	r18
    1772:	e2 f7       	brpl	.-8      	; 0x176c <PIN+0xca>
    1774:	9a 01       	movw	r18, r20
    1776:	28 23       	and	r18, r24
    1778:	39 23       	and	r19, r25
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <PIN+0xe6>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <PIN+0xe2>
    178c:	ca 01       	movw	r24, r20
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	4b c0       	rjmp	.+150    	; 0x1828 <PIN+0x186>
		}
		break;
	case PC:
		if(pi==total)
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	29 f4       	brne	.+10     	; 0x17a2 <PIN+0x100>
		{
		RET=PINC;
    1798:	e3 e3       	ldi	r30, 0x33	; 51
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <PIN+0x186>
		}
		else
		{
		RET=GET_BIT(PINC,pi);
    17a2:	e3 e3       	ldi	r30, 0x33	; 51
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <PIN+0x11a>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	2a 95       	dec	r18
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <PIN+0x116>
    17c0:	9a 01       	movw	r18, r20
    17c2:	28 23       	and	r18, r24
    17c4:	39 23       	and	r19, r25
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <PIN+0x132>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <PIN+0x12e>
    17d8:	ca 01       	movw	r24, r20
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	25 c0       	rjmp	.+74     	; 0x1828 <PIN+0x186>
		}
		break;
	case PD:
		if(pi==total)
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	29 f4       	brne	.+10     	; 0x17ee <PIN+0x14c>
		{
		RET=PIND;
    17e4:	e0 e3       	ldi	r30, 0x30	; 48
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	1d c0       	rjmp	.+58     	; 0x1828 <PIN+0x186>
		}
		else
		{
		RET=GET_BIT(PIND,pi);
    17ee:	e0 e3       	ldi	r30, 0x30	; 48
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <PIN+0x166>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	2a 95       	dec	r18
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <PIN+0x162>
    180c:	9a 01       	movw	r18, r20
    180e:	28 23       	and	r18, r24
    1810:	39 23       	and	r19, r25
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <PIN+0x17e>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <PIN+0x17a>
    1824:	ca 01       	movw	r24, r20
    1826:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return RET;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <KEYPAD>:
 *      Author: Admin
 */
#include "KEYPAD.h"

uint8 KEYPAD()
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	60 97       	sbiw	r28, 0x10	; 16
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
	uint8 R,C;
	for (R=ROW_INIT_PIN;R<=7;R++)  	{DDR(PB,R,INPUT);}
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	88 8b       	std	Y+16, r24	; 0x10
    1852:	08 c0       	rjmp	.+16     	; 0x1864 <KEYPAD+0x2a>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	68 89       	ldd	r22, Y+16	; 0x10
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
    185e:	88 89       	ldd	r24, Y+16	; 0x10
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	88 8b       	std	Y+16, r24	; 0x10
    1864:	88 89       	ldd	r24, Y+16	; 0x10
    1866:	88 30       	cpi	r24, 0x08	; 8
    1868:	a8 f3       	brcs	.-22     	; 0x1854 <KEYPAD+0x1a>
	for (C=COL_INIT_PIN;C<=5;C++)  	{DDR(PD,C,INPUT);}
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	8f 87       	std	Y+15, r24	; 0x0f
    186e:	08 c0       	rjmp	.+16     	; 0x1880 <KEYPAD+0x46>
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	6f 85       	ldd	r22, Y+15	; 0x0f
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
    187a:	8f 85       	ldd	r24, Y+15	; 0x0f
    187c:	8f 5f       	subi	r24, 0xFF	; 255
    187e:	8f 87       	std	Y+15, r24	; 0x0f
    1880:	8f 85       	ldd	r24, Y+15	; 0x0f
    1882:	86 30       	cpi	r24, 0x06	; 6
    1884:	a8 f3       	brcs	.-22     	; 0x1870 <KEYPAD+0x36>

	while(1)
	{
		for(R=0;R<ROW_NUM;R++)
    1886:	18 8a       	std	Y+16, r1	; 0x10
    1888:	b4 c0       	rjmp	.+360    	; 0x19f2 <KEYPAD+0x1b8>
		{
			DDR (PB,R+ROW_INIT_PIN,OUTPUT);
    188a:	88 89       	ldd	r24, Y+16	; 0x10
    188c:	98 2f       	mov	r25, r24
    188e:	9c 5f       	subi	r25, 0xFC	; 252
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	69 2f       	mov	r22, r25
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
			PORT(PB,R+ROW_INIT_PIN,OFF);
    189a:	88 89       	ldd	r24, Y+16	; 0x10
    189c:	98 2f       	mov	r25, r24
    189e:	9c 5f       	subi	r25, 0xFC	; 252
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	69 2f       	mov	r22, r25
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>

			for(C=0;C<COL_NUM;C++)
    18aa:	1f 86       	std	Y+15, r1	; 0x0f
    18ac:	22 c0       	rjmp	.+68     	; 0x18f2 <KEYPAD+0xb8>
			{
			  if (PIN(PD,C+COL_INIT_PIN)==0)
    18ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b0:	98 2f       	mov	r25, r24
    18b2:	9e 5f       	subi	r25, 0xFE	; 254
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	69 2f       	mov	r22, r25
    18b8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <PIN>
    18bc:	88 23       	and	r24, r24
    18be:	b1 f4       	brne	.+44     	; 0x18ec <KEYPAD+0xb2>
			  {
				  return K_P_4X4((R*COL_NUM)+C+1);
    18c0:	88 89       	ldd	r24, Y+16	; 0x10
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	98 2f       	mov	r25, r24
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	89 0f       	add	r24, r25
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <K_P_4X4>
			DDR(PB,R+ROW_INIT_PIN,INPUT);
			_delay_ms(5);

		}
	}
}
    18da:	60 96       	adiw	r28, 0x10	; 16
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret
		for(R=0;R<ROW_NUM;R++)
		{
			DDR (PB,R+ROW_INIT_PIN,OUTPUT);
			PORT(PB,R+ROW_INIT_PIN,OFF);

			for(C=0;C<COL_NUM;C++)
    18ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	8f 87       	std	Y+15, r24	; 0x0f
    18f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	d8 f2       	brcs	.-74     	; 0x18ae <KEYPAD+0x74>
			  {
				  return K_P_4X4((R*COL_NUM)+C+1);
				  while (!PIN(PD,C+COL_INIT_PIN)){}
			  }
			}
			DDR(PB,R+ROW_INIT_PIN,INPUT);
    18f8:	88 89       	ldd	r24, Y+16	; 0x10
    18fa:	98 2f       	mov	r25, r24
    18fc:	9c 5f       	subi	r25, 0xFC	; 252
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	69 2f       	mov	r22, r25
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 ea       	ldi	r26, 0xA0	; 160
    190e:	b0 e4       	ldi	r27, 0x40	; 64
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	9c 87       	std	Y+12, r25	; 0x0c
    1914:	ad 87       	std	Y+13, r26	; 0x0d
    1916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a e7       	ldi	r20, 0x7A	; 122
    1926:	53 e4       	ldi	r21, 0x43	; 67
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8f 83       	std	Y+7, r24	; 0x07
    1932:	98 87       	std	Y+8, r25	; 0x08
    1934:	a9 87       	std	Y+9, r26	; 0x09
    1936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <KEYPAD+0x120>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <KEYPAD+0x19e>
	else if (__tmp > 65535)
    195a:	6f 81       	ldd	r22, Y+7	; 0x07
    195c:	78 85       	ldd	r23, Y+8	; 0x08
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <KEYPAD+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <KEYPAD+0x180>
    199c:	89 e1       	ldi	r24, 0x19	; 25
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <KEYPAD+0x16e>
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <KEYPAD+0x162>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <KEYPAD+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6f 81       	ldd	r22, Y+7	; 0x07
    19c6:	78 85       	ldd	r23, Y+8	; 0x08
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <KEYPAD+0x1aa>
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
	for (R=ROW_INIT_PIN;R<=7;R++)  	{DDR(PB,R,INPUT);}
	for (C=COL_INIT_PIN;C<=5;C++)  	{DDR(PD,C,INPUT);}

	while(1)
	{
		for(R=0;R<ROW_NUM;R++)
    19ec:	88 89       	ldd	r24, Y+16	; 0x10
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	88 8b       	std	Y+16, r24	; 0x10
    19f2:	88 89       	ldd	r24, Y+16	; 0x10
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <KEYPAD+0x1c0>
    19f8:	48 cf       	rjmp	.-368    	; 0x188a <KEYPAD+0x50>
    19fa:	45 cf       	rjmp	.-374    	; 0x1886 <KEYPAD+0x4c>

000019fc <K_P_4X4>:

		}
	}
}
uint8 K_P_4X4(uint8 num)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <K_P_4X4+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <K_P_4X4+0x8>
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button;
	switch(num)
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3c 83       	std	Y+4, r19	; 0x04
    1a12:	2b 83       	std	Y+3, r18	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	88 30       	cpi	r24, 0x08	; 8
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <K_P_4X4+0x24>
    1a1e:	70 c0       	rjmp	.+224    	; 0x1b00 <K_P_4X4+0x104>
    1a20:	2b 81       	ldd	r18, Y+3	; 0x03
    1a22:	3c 81       	ldd	r19, Y+4	; 0x04
    1a24:	29 30       	cpi	r18, 0x09	; 9
    1a26:	31 05       	cpc	r19, r1
    1a28:	5c f5       	brge	.+86     	; 0x1a80 <K_P_4X4+0x84>
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <K_P_4X4+0x3a>
    1a34:	59 c0       	rjmp	.+178    	; 0x1ae8 <K_P_4X4+0xec>
    1a36:	2b 81       	ldd	r18, Y+3	; 0x03
    1a38:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3a:	25 30       	cpi	r18, 0x05	; 5
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	9c f4       	brge	.+38     	; 0x1a66 <K_P_4X4+0x6a>
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <K_P_4X4+0x50>
    1a4a:	48 c0       	rjmp	.+144    	; 0x1adc <K_P_4X4+0xe0>
    1a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a50:	23 30       	cpi	r18, 0x03	; 3
    1a52:	31 05       	cpc	r19, r1
    1a54:	0c f0       	brlt	.+2      	; 0x1a58 <K_P_4X4+0x5c>
    1a56:	45 c0       	rjmp	.+138    	; 0x1ae2 <K_P_4X4+0xe6>
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <K_P_4X4+0x68>
    1a62:	39 c0       	rjmp	.+114    	; 0x1ad6 <K_P_4X4+0xda>
    1a64:	67 c0       	rjmp	.+206    	; 0x1b34 <K_P_4X4+0x138>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	26 30       	cpi	r18, 0x06	; 6
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <K_P_4X4+0x76>
    1a70:	41 c0       	rjmp	.+130    	; 0x1af4 <K_P_4X4+0xf8>
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	87 30       	cpi	r24, 0x07	; 7
    1a78:	91 05       	cpc	r25, r1
    1a7a:	0c f0       	brlt	.+2      	; 0x1a7e <K_P_4X4+0x82>
    1a7c:	3e c0       	rjmp	.+124    	; 0x1afa <K_P_4X4+0xfe>
    1a7e:	37 c0       	rjmp	.+110    	; 0x1aee <K_P_4X4+0xf2>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	2c 30       	cpi	r18, 0x0C	; 12
    1a86:	31 05       	cpc	r19, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <K_P_4X4+0x90>
    1a8a:	46 c0       	rjmp	.+140    	; 0x1b18 <K_P_4X4+0x11c>
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	8d 30       	cpi	r24, 0x0D	; 13
    1a92:	91 05       	cpc	r25, r1
    1a94:	5c f4       	brge	.+22     	; 0x1aac <K_P_4X4+0xb0>
    1a96:	2b 81       	ldd	r18, Y+3	; 0x03
    1a98:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9a:	2a 30       	cpi	r18, 0x0A	; 10
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	b1 f1       	breq	.+108    	; 0x1b0c <K_P_4X4+0x110>
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	8b 30       	cpi	r24, 0x0B	; 11
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	a4 f5       	brge	.+104    	; 0x1b12 <K_P_4X4+0x116>
    1aaa:	2d c0       	rjmp	.+90     	; 0x1b06 <K_P_4X4+0x10a>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	2e 30       	cpi	r18, 0x0E	; 14
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	b9 f1       	breq	.+110    	; 0x1b24 <K_P_4X4+0x128>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	8e 30       	cpi	r24, 0x0E	; 14
    1abc:	91 05       	cpc	r25, r1
    1abe:	7c f1       	brlt	.+94     	; 0x1b1e <K_P_4X4+0x122>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	2f 30       	cpi	r18, 0x0F	; 15
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	79 f1       	breq	.+94     	; 0x1b28 <K_P_4X4+0x12c>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	80 31       	cpi	r24, 0x10	; 16
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	69 f1       	breq	.+90     	; 0x1b2e <K_P_4X4+0x132>
    1ad4:	2f c0       	rjmp	.+94     	; 0x1b34 <K_P_4X4+0x138>
	{
	case 1: keypad_button = 7;
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	2e c0       	rjmp	.+92     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 2: keypad_button = 8;
    1adc:	88 e0       	ldi	r24, 0x08	; 8
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	2b c0       	rjmp	.+86     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 3: keypad_button = 9;
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	28 c0       	rjmp	.+80     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 4: keypad_button = '%'; // ASCII Code of %
    1ae8:	85 e2       	ldi	r24, 0x25	; 37
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	25 c0       	rjmp	.+74     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 5: keypad_button = 4;
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	22 c0       	rjmp	.+68     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 6: keypad_button = 5;
    1af4:	85 e0       	ldi	r24, 0x05	; 5
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	1f c0       	rjmp	.+62     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 7: keypad_button = 6;
    1afa:	86 e0       	ldi	r24, 0x06	; 6
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	1c c0       	rjmp	.+56     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b00:	8a e2       	ldi	r24, 0x2A	; 42
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	19 c0       	rjmp	.+50     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 9: keypad_button = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	16 c0       	rjmp	.+44     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 10: keypad_button = 2;
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	13 c0       	rjmp	.+38     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 11: keypad_button = 3;
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	10 c0       	rjmp	.+32     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b18:	8d e2       	ldi	r24, 0x2D	; 45
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	0d c0       	rjmp	.+26     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    1b1e:	8d e0       	ldi	r24, 0x0D	; 13
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	0a c0       	rjmp	.+20     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 14: keypad_button = 0;
    1b24:	19 82       	std	Y+1, r1	; 0x01
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b28:	8d e3       	ldi	r24, 0x3D	; 61
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <K_P_4X4+0x13c>
			break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b2e:	8b e2       	ldi	r24, 0x2B	; 43
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <K_P_4X4+0x13c>
			break;
	default: keypad_button = num;
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	89 83       	std	Y+1, r24	; 0x01
			break;
    }
return keypad_button;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <SEND2>:

#include "LCD2.h"
//===================================================================
// SEND FIRST 4 BITS
void SEND2(uint8 send)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
	PORT(D4,GET_BIT(send,4) );
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	80 71       	andi	r24, 0x10	; 16
    1b5c:	90 70       	andi	r25, 0x00	; 0
    1b5e:	95 95       	asr	r25
    1b60:	87 95       	ror	r24
    1b62:	95 95       	asr	r25
    1b64:	87 95       	ror	r24
    1b66:	95 95       	asr	r25
    1b68:	87 95       	ror	r24
    1b6a:	95 95       	asr	r25
    1b6c:	87 95       	ror	r24
    1b6e:	98 2f       	mov	r25, r24
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	64 e0       	ldi	r22, 0x04	; 4
    1b74:	49 2f       	mov	r20, r25
    1b76:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
	PORT(D5,GET_BIT(send,5) );
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	80 72       	andi	r24, 0x20	; 32
    1b82:	90 70       	andi	r25, 0x00	; 0
    1b84:	95 95       	asr	r25
    1b86:	87 95       	ror	r24
    1b88:	95 95       	asr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	95 95       	asr	r25
    1b8e:	87 95       	ror	r24
    1b90:	95 95       	asr	r25
    1b92:	87 95       	ror	r24
    1b94:	95 95       	asr	r25
    1b96:	87 95       	ror	r24
    1b98:	98 2f       	mov	r25, r24
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	65 e0       	ldi	r22, 0x05	; 5
    1b9e:	49 2f       	mov	r20, r25
    1ba0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
	PORT(D6,GET_BIT(send,6) );
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	80 74       	andi	r24, 0x40	; 64
    1bac:	90 70       	andi	r25, 0x00	; 0
    1bae:	08 2e       	mov	r0, r24
    1bb0:	89 2f       	mov	r24, r25
    1bb2:	00 0c       	add	r0, r0
    1bb4:	88 1f       	adc	r24, r24
    1bb6:	99 0b       	sbc	r25, r25
    1bb8:	00 0c       	add	r0, r0
    1bba:	88 1f       	adc	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	66 e0       	ldi	r22, 0x06	; 6
    1bc4:	49 2f       	mov	r20, r25
    1bc6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
	PORT(D7,GET_BIT(send,7) );
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	98 2f       	mov	r25, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	99 27       	eor	r25, r25
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	67 e0       	ldi	r22, 0x07	; 7
    1bd8:	49 2f       	mov	r20, r25
    1bda:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
}
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <SEND1>:
//===================================================================
// SEND SECOND 4 BITS
void SEND1(uint8 send)

{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
	PORT(D4,GET_BIT(send,0) );
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	91 70       	andi	r25, 0x01	; 1
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	64 e0       	ldi	r22, 0x04	; 4
    1bfc:	49 2f       	mov	r20, r25
    1bfe:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
	PORT(D5,GET_BIT(send,1) );
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	82 70       	andi	r24, 0x02	; 2
    1c0a:	90 70       	andi	r25, 0x00	; 0
    1c0c:	95 95       	asr	r25
    1c0e:	87 95       	ror	r24
    1c10:	98 2f       	mov	r25, r24
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	65 e0       	ldi	r22, 0x05	; 5
    1c16:	49 2f       	mov	r20, r25
    1c18:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
	PORT(D6,GET_BIT(send,2) );
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	88 2f       	mov	r24, r24
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	84 70       	andi	r24, 0x04	; 4
    1c24:	90 70       	andi	r25, 0x00	; 0
    1c26:	95 95       	asr	r25
    1c28:	87 95       	ror	r24
    1c2a:	95 95       	asr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	98 2f       	mov	r25, r24
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	66 e0       	ldi	r22, 0x06	; 6
    1c34:	49 2f       	mov	r20, r25
    1c36:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
	PORT(D7,GET_BIT(send,3) );
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	88 70       	andi	r24, 0x08	; 8
    1c42:	90 70       	andi	r25, 0x00	; 0
    1c44:	95 95       	asr	r25
    1c46:	87 95       	ror	r24
    1c48:	95 95       	asr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	95 95       	asr	r25
    1c4e:	87 95       	ror	r24
    1c50:	98 2f       	mov	r25, r24
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	67 e0       	ldi	r22, 0x07	; 7
    1c56:	49 2f       	mov	r20, r25
    1c58:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
}
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <LCD_INIT>:
// LCD INITIALIZATION
void LCD_INIT(void)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	6c 97       	sbiw	r28, 0x1c	; 28
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
			LCD_COMMAND(0x32);
			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE);
			LCD_COMMAND(LCD_CURSOR_OFF);
			LCD_COMMAND(LCD_CLEAR_COMMAND);
	#elif (LCD_TYPE ==EIGHT_BITS_MODE)
			DDR(RS,OUTPUT);            //RS PIN     ---> OUTPUT
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
			DDR(RW,OUTPUT);
    1c82:	83 e0       	ldi	r24, 0x03	; 3
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
			DDR(EN,OUTPUT);            //ENABLE PIN ---> OUTPUT
    1c8c:	83 e0       	ldi	r24, 0x03	; 3
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c9c:	b1 e4       	ldi	r27, 0x41	; 65
    1c9e:	89 8f       	std	Y+25, r24	; 0x19
    1ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	53 e4       	ldi	r21, 0x43	; 67
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8d 8b       	std	Y+21, r24	; 0x15
    1cc0:	9e 8b       	std	Y+22, r25	; 0x16
    1cc2:	af 8b       	std	Y+23, r26	; 0x17
    1cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_INIT+0x84>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9c 8b       	std	Y+20, r25	; 0x14
    1ce4:	8b 8b       	std	Y+19, r24	; 0x13
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_INIT+0x102>
	else if (__tmp > 65535)
    1ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cea:	7e 89       	ldd	r23, Y+22	; 0x16
    1cec:	8f 89       	ldd	r24, Y+23	; 0x17
    1cee:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_INIT+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	69 8d       	ldd	r22, Y+25	; 0x19
    1d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_INIT+0xe4>
    1d2a:	89 e1       	ldi	r24, 0x19	; 25
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	89 8b       	std	Y+17, r24	; 0x11
    1d32:	89 89       	ldd	r24, Y+17	; 0x11
    1d34:	9a 89       	ldd	r25, Y+18	; 0x12
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_INIT+0xd2>
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d40:	9c 89       	ldd	r25, Y+20	; 0x14
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_INIT+0xc6>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_INIT+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9c 8b       	std	Y+20, r25	; 0x14
    1d64:	8b 8b       	std	Y+19, r24	; 0x13
    1d66:	8b 89       	ldd	r24, Y+19	; 0x13
    1d68:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6a:	98 8b       	std	Y+16, r25	; 0x10
    1d6c:	8f 87       	std	Y+15, r24	; 0x0f
    1d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d70:	98 89       	ldd	r25, Y+16	; 0x10
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_INIT+0x10e>
    1d76:	98 8b       	std	Y+16, r25	; 0x10
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			DDR(PC,total,OUTPUT);
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	68 e0       	ldi	r22, 0x08	; 8
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 ea       	ldi	r26, 0xA0	; 160
    1d8a:	b1 e4       	ldi	r27, 0x41	; 65
    1d8c:	8b 87       	std	Y+11, r24	; 0x0b
    1d8e:	9c 87       	std	Y+12, r25	; 0x0c
    1d90:	ad 87       	std	Y+13, r26	; 0x0d
    1d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a e7       	ldi	r20, 0x7A	; 122
    1da2:	53 e4       	ldi	r21, 0x43	; 67
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8f 83       	std	Y+7, r24	; 0x07
    1dae:	98 87       	std	Y+8, r25	; 0x08
    1db0:	a9 87       	std	Y+9, r26	; 0x09
    1db2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db4:	6f 81       	ldd	r22, Y+7	; 0x07
    1db6:	78 85       	ldd	r23, Y+8	; 0x08
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e8       	ldi	r20, 0x80	; 128
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc8:	88 23       	and	r24, r24
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <LCD_INIT+0x172>
		__ticks = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <LCD_INIT+0x1f0>
	else if (__tmp > 65535)
    1dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd8:	78 85       	ldd	r23, Y+8	; 0x08
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	4c f5       	brge	.+82     	; 0x1e40 <LCD_INIT+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <LCD_INIT+0x1d2>
    1e18:	89 e1       	ldi	r24, 0x19	; 25
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_INIT+0x1c0>
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <LCD_INIT+0x1b4>
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <LCD_INIT+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_INIT+0x1fc>
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_COMMAND(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1e68:	88 e3       	ldi	r24, 0x38	; 56
    1e6a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <LCD_COMMAND>
			LCD_COMMAND(LCD_CURSOR_OFF);
    1e6e:	8c e0       	ldi	r24, 0x0C	; 12
    1e70:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <LCD_COMMAND>
			LCD_COMMAND(LCD_CLEAR_COMMAND);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <LCD_COMMAND>
	#endif
}
    1e7a:	6c 96       	adiw	r28, 0x1c	; 28
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <LCD_COMMAND>:
// SEND COMMAND
void LCD_COMMAND(uint8 command)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	e9 97       	sbiw	r28, 0x39	; 57
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	89 af       	std	Y+57, r24	; 0x39
			SEND1(command);
			_delay_ms(1);
			PORT(EN,OFF);
			_delay_ms(1);
	#elif (LCD_TYPE==EIGHT_BITS_MODE)
			PORT(RS,OFF);
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
			PORT(RW,OFF);
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	61 e0       	ldi	r22, 0x01	; 1
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a0 e8       	ldi	r26, 0x80	; 128
    1ebc:	bf e3       	ldi	r27, 0x3F	; 63
    1ebe:	8d ab       	std	Y+53, r24	; 0x35
    1ec0:	9e ab       	std	Y+54, r25	; 0x36
    1ec2:	af ab       	std	Y+55, r26	; 0x37
    1ec4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eca:	8f a9       	ldd	r24, Y+55	; 0x37
    1ecc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a e7       	ldi	r20, 0x7A	; 122
    1ed4:	53 e4       	ldi	r21, 0x43	; 67
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	89 ab       	std	Y+49, r24	; 0x31
    1ee0:	9a ab       	std	Y+50, r25	; 0x32
    1ee2:	ab ab       	std	Y+51, r26	; 0x33
    1ee4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eea:	8b a9       	ldd	r24, Y+51	; 0x33
    1eec:	9c a9       	ldd	r25, Y+52	; 0x34
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <LCD_COMMAND+0x7c>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	98 ab       	std	Y+48, r25	; 0x30
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <LCD_COMMAND+0xfa>
	else if (__tmp > 65535)
    1f08:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <LCD_COMMAND+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	6d a9       	ldd	r22, Y+53	; 0x35
    1f22:	7e a9       	ldd	r23, Y+54	; 0x36
    1f24:	8f a9       	ldd	r24, Y+55	; 0x37
    1f26:	98 ad       	ldd	r25, Y+56	; 0x38
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	98 ab       	std	Y+48, r25	; 0x30
    1f46:	8f a7       	std	Y+47, r24	; 0x2f
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <LCD_COMMAND+0xdc>
    1f4a:	89 e1       	ldi	r24, 0x19	; 25
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9e a7       	std	Y+46, r25	; 0x2e
    1f50:	8d a7       	std	Y+45, r24	; 0x2d
    1f52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_COMMAND+0xca>
    1f5a:	9e a7       	std	Y+46, r25	; 0x2e
    1f5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f60:	98 a9       	ldd	r25, Y+48	; 0x30
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	98 ab       	std	Y+48, r25	; 0x30
    1f66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <LCD_COMMAND+0xbe>
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <LCD_COMMAND+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	69 a9       	ldd	r22, Y+49	; 0x31
    1f74:	7a a9       	ldd	r23, Y+50	; 0x32
    1f76:	8b a9       	ldd	r24, Y+51	; 0x33
    1f78:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	98 ab       	std	Y+48, r25	; 0x30
    1f84:	8f a7       	std	Y+47, r24	; 0x2f
    1f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f88:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8a:	9c a7       	std	Y+44, r25	; 0x2c
    1f8c:	8b a7       	std	Y+43, r24	; 0x2b
    1f8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_COMMAND+0x106>
    1f96:	9c a7       	std	Y+44, r25	; 0x2c
    1f98:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			PORT(EN,ON);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e8       	ldi	r26, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	8f a3       	std	Y+39, r24	; 0x27
    1fae:	98 a7       	std	Y+40, r25	; 0x28
    1fb0:	a9 a7       	std	Y+41, r26	; 0x29
    1fb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	53 e4       	ldi	r21, 0x43	; 67
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8b a3       	std	Y+35, r24	; 0x23
    1fce:	9c a3       	std	Y+36, r25	; 0x24
    1fd0:	ad a3       	std	Y+37, r26	; 0x25
    1fd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fda:	9e a1       	ldd	r25, Y+38	; 0x26
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_COMMAND+0x16a>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9a a3       	std	Y+34, r25	; 0x22
    1ff2:	89 a3       	std	Y+33, r24	; 0x21
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_COMMAND+0x1e8>
	else if (__tmp > 65535)
    1ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_COMMAND+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	6f a1       	ldd	r22, Y+39	; 0x27
    2010:	78 a5       	ldd	r23, Y+40	; 0x28
    2012:	89 a5       	ldd	r24, Y+41	; 0x29
    2014:	9a a5       	ldd	r25, Y+42	; 0x2a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9a a3       	std	Y+34, r25	; 0x22
    2034:	89 a3       	std	Y+33, r24	; 0x21
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_COMMAND+0x1ca>
    2038:	89 e1       	ldi	r24, 0x19	; 25
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	98 a3       	std	Y+32, r25	; 0x20
    203e:	8f 8f       	std	Y+31, r24	; 0x1f
    2040:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2042:	98 a1       	ldd	r25, Y+32	; 0x20
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_COMMAND+0x1b8>
    2048:	98 a3       	std	Y+32, r25	; 0x20
    204a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	89 a1       	ldd	r24, Y+33	; 0x21
    204e:	9a a1       	ldd	r25, Y+34	; 0x22
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9a a3       	std	Y+34, r25	; 0x22
    2054:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	89 a1       	ldd	r24, Y+33	; 0x21
    2058:	9a a1       	ldd	r25, Y+34	; 0x22
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_COMMAND+0x1ac>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_COMMAND+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6b a1       	ldd	r22, Y+35	; 0x23
    2062:	7c a1       	ldd	r23, Y+36	; 0x24
    2064:	8d a1       	ldd	r24, Y+37	; 0x25
    2066:	9e a1       	ldd	r25, Y+38	; 0x26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9a a3       	std	Y+34, r25	; 0x22
    2072:	89 a3       	std	Y+33, r24	; 0x21
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	9a a1       	ldd	r25, Y+34	; 0x22
    2078:	9e 8f       	std	Y+30, r25	; 0x1e
    207a:	8d 8f       	std	Y+29, r24	; 0x1d
    207c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    207e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_COMMAND+0x1f4>
    2084:	9e 8f       	std	Y+30, r25	; 0x1e
    2086:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			PORT(PC,total,command);
    2088:	82 e0       	ldi	r24, 0x02	; 2
    208a:	68 e0       	ldi	r22, 0x08	; 8
    208c:	49 ad       	ldd	r20, Y+57	; 0x39
    208e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e8       	ldi	r26, 0x80	; 128
    2098:	bf e3       	ldi	r27, 0x3F	; 63
    209a:	89 8f       	std	Y+25, r24	; 0x19
    209c:	9a 8f       	std	Y+26, r25	; 0x1a
    209e:	ab 8f       	std	Y+27, r26	; 0x1b
    20a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	69 8d       	ldd	r22, Y+25	; 0x19
    20a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a e7       	ldi	r20, 0x7A	; 122
    20b0:	53 e4       	ldi	r21, 0x43	; 67
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8d 8b       	std	Y+21, r24	; 0x15
    20bc:	9e 8b       	std	Y+22, r25	; 0x16
    20be:	af 8b       	std	Y+23, r26	; 0x17
    20c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c2:	6d 89       	ldd	r22, Y+21	; 0x15
    20c4:	7e 89       	ldd	r23, Y+22	; 0x16
    20c6:	8f 89       	ldd	r24, Y+23	; 0x17
    20c8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_COMMAND+0x258>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_COMMAND+0x2d6>
	else if (__tmp > 65535)
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_COMMAND+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	69 8d       	ldd	r22, Y+25	; 0x19
    20fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9c 8b       	std	Y+20, r25	; 0x14
    2122:	8b 8b       	std	Y+19, r24	; 0x13
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_COMMAND+0x2b8>
    2126:	89 e1       	ldi	r24, 0x19	; 25
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9a 8b       	std	Y+18, r25	; 0x12
    212c:	89 8b       	std	Y+17, r24	; 0x11
    212e:	89 89       	ldd	r24, Y+17	; 0x11
    2130:	9a 89       	ldd	r25, Y+18	; 0x12
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_COMMAND+0x2a6>
    2136:	9a 8b       	std	Y+18, r25	; 0x12
    2138:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_COMMAND+0x29a>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_COMMAND+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6d 89       	ldd	r22, Y+21	; 0x15
    2150:	7e 89       	ldd	r23, Y+22	; 0x16
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	98 8b       	std	Y+16, r25	; 0x10
    2168:	8f 87       	std	Y+15, r24	; 0x0f
    216a:	8f 85       	ldd	r24, Y+15	; 0x0f
    216c:	98 89       	ldd	r25, Y+16	; 0x10
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_COMMAND+0x2e2>
    2172:	98 8b       	std	Y+16, r25	; 0x10
    2174:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			PORT(EN,OFF);
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	62 e0       	ldi	r22, 0x02	; 2
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e8       	ldi	r26, 0x80	; 128
    2186:	bf e3       	ldi	r27, 0x3F	; 63
    2188:	8b 87       	std	Y+11, r24	; 0x0b
    218a:	9c 87       	std	Y+12, r25	; 0x0c
    218c:	ad 87       	std	Y+13, r26	; 0x0d
    218e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	6b 85       	ldd	r22, Y+11	; 0x0b
    2192:	7c 85       	ldd	r23, Y+12	; 0x0c
    2194:	8d 85       	ldd	r24, Y+13	; 0x0d
    2196:	9e 85       	ldd	r25, Y+14	; 0x0e
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a e7       	ldi	r20, 0x7A	; 122
    219e:	53 e4       	ldi	r21, 0x43	; 67
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8f 83       	std	Y+7, r24	; 0x07
    21aa:	98 87       	std	Y+8, r25	; 0x08
    21ac:	a9 87       	std	Y+9, r26	; 0x09
    21ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <LCD_COMMAND+0x346>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <LCD_COMMAND+0x3c4>
	else if (__tmp > 65535)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <LCD_COMMAND+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <LCD_COMMAND+0x3a6>
    2214:	89 e1       	ldi	r24, 0x19	; 25
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_COMMAND+0x394>
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <LCD_COMMAND+0x388>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <LCD_COMMAND+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6f 81       	ldd	r22, Y+7	; 0x07
    223e:	78 85       	ldd	r23, Y+8	; 0x08
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_COMMAND+0x3d0>
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
	#endif
}
    2264:	e9 96       	adiw	r28, 0x39	; 57
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <LCD_CHAR>:
//===================================================================
// SEND CHARACHTER
void LCD_CHAR(uint8 charachter)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	e9 97       	sbiw	r28, 0x39	; 57
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	89 af       	std	Y+57, r24	; 0x39
		PORT(EN,OFF);
		_delay_ms(1);

	#elif (LCD_TYPE==EIGHT_BITS_MODE)

			PORT(RS,ON);
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
			PORT(RW,OFF);
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	61 e0       	ldi	r22, 0x01	; 1
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e8       	ldi	r26, 0x80	; 128
    22a6:	bf e3       	ldi	r27, 0x3F	; 63
    22a8:	8d ab       	std	Y+53, r24	; 0x35
    22aa:	9e ab       	std	Y+54, r25	; 0x36
    22ac:	af ab       	std	Y+55, r26	; 0x37
    22ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	6d a9       	ldd	r22, Y+53	; 0x35
    22b2:	7e a9       	ldd	r23, Y+54	; 0x36
    22b4:	8f a9       	ldd	r24, Y+55	; 0x37
    22b6:	98 ad       	ldd	r25, Y+56	; 0x38
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a e7       	ldi	r20, 0x7A	; 122
    22be:	53 e4       	ldi	r21, 0x43	; 67
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	89 ab       	std	Y+49, r24	; 0x31
    22ca:	9a ab       	std	Y+50, r25	; 0x32
    22cc:	ab ab       	std	Y+51, r26	; 0x33
    22ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22d0:	69 a9       	ldd	r22, Y+49	; 0x31
    22d2:	7a a9       	ldd	r23, Y+50	; 0x32
    22d4:	8b a9       	ldd	r24, Y+51	; 0x33
    22d6:	9c a9       	ldd	r25, Y+52	; 0x34
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e8       	ldi	r20, 0x80	; 128
    22de:	5f e3       	ldi	r21, 0x3F	; 63
    22e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <LCD_CHAR+0x7c>
		__ticks = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	98 ab       	std	Y+48, r25	; 0x30
    22ee:	8f a7       	std	Y+47, r24	; 0x2f
    22f0:	3f c0       	rjmp	.+126    	; 0x2370 <LCD_CHAR+0xfa>
	else if (__tmp > 65535)
    22f2:	69 a9       	ldd	r22, Y+49	; 0x31
    22f4:	7a a9       	ldd	r23, Y+50	; 0x32
    22f6:	8b a9       	ldd	r24, Y+51	; 0x33
    22f8:	9c a9       	ldd	r25, Y+52	; 0x34
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	4f e7       	ldi	r20, 0x7F	; 127
    2300:	57 e4       	ldi	r21, 0x47	; 71
    2302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2306:	18 16       	cp	r1, r24
    2308:	4c f5       	brge	.+82     	; 0x235c <LCD_CHAR+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	6d a9       	ldd	r22, Y+53	; 0x35
    230c:	7e a9       	ldd	r23, Y+54	; 0x36
    230e:	8f a9       	ldd	r24, Y+55	; 0x37
    2310:	98 ad       	ldd	r25, Y+56	; 0x38
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e2       	ldi	r20, 0x20	; 32
    2318:	51 e4       	ldi	r21, 0x41	; 65
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <LCD_CHAR+0xdc>
    2334:	89 e1       	ldi	r24, 0x19	; 25
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e a7       	std	Y+46, r25	; 0x2e
    233a:	8d a7       	std	Y+45, r24	; 0x2d
    233c:	8d a5       	ldd	r24, Y+45	; 0x2d
    233e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_CHAR+0xca>
    2344:	9e a7       	std	Y+46, r25	; 0x2e
    2346:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2348:	8f a5       	ldd	r24, Y+47	; 0x2f
    234a:	98 a9       	ldd	r25, Y+48	; 0x30
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	98 ab       	std	Y+48, r25	; 0x30
    2350:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2352:	8f a5       	ldd	r24, Y+47	; 0x2f
    2354:	98 a9       	ldd	r25, Y+48	; 0x30
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	69 f7       	brne	.-38     	; 0x2334 <LCD_CHAR+0xbe>
    235a:	14 c0       	rjmp	.+40     	; 0x2384 <LCD_CHAR+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235c:	69 a9       	ldd	r22, Y+49	; 0x31
    235e:	7a a9       	ldd	r23, Y+50	; 0x32
    2360:	8b a9       	ldd	r24, Y+51	; 0x33
    2362:	9c a9       	ldd	r25, Y+52	; 0x34
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	98 ab       	std	Y+48, r25	; 0x30
    236e:	8f a7       	std	Y+47, r24	; 0x2f
    2370:	8f a5       	ldd	r24, Y+47	; 0x2f
    2372:	98 a9       	ldd	r25, Y+48	; 0x30
    2374:	9c a7       	std	Y+44, r25	; 0x2c
    2376:	8b a7       	std	Y+43, r24	; 0x2b
    2378:	8b a5       	ldd	r24, Y+43	; 0x2b
    237a:	9c a5       	ldd	r25, Y+44	; 0x2c
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <LCD_CHAR+0x106>
    2380:	9c a7       	std	Y+44, r25	; 0x2c
    2382:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			PORT(EN,ON);
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e8       	ldi	r26, 0x80	; 128
    2394:	bf e3       	ldi	r27, 0x3F	; 63
    2396:	8f a3       	std	Y+39, r24	; 0x27
    2398:	98 a7       	std	Y+40, r25	; 0x28
    239a:	a9 a7       	std	Y+41, r26	; 0x29
    239c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	6f a1       	ldd	r22, Y+39	; 0x27
    23a0:	78 a5       	ldd	r23, Y+40	; 0x28
    23a2:	89 a5       	ldd	r24, Y+41	; 0x29
    23a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a e7       	ldi	r20, 0x7A	; 122
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8b a3       	std	Y+35, r24	; 0x23
    23b8:	9c a3       	std	Y+36, r25	; 0x24
    23ba:	ad a3       	std	Y+37, r26	; 0x25
    23bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23be:	6b a1       	ldd	r22, Y+35	; 0x23
    23c0:	7c a1       	ldd	r23, Y+36	; 0x24
    23c2:	8d a1       	ldd	r24, Y+37	; 0x25
    23c4:	9e a1       	ldd	r25, Y+38	; 0x26
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <LCD_CHAR+0x16a>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9a a3       	std	Y+34, r25	; 0x22
    23dc:	89 a3       	std	Y+33, r24	; 0x21
    23de:	3f c0       	rjmp	.+126    	; 0x245e <LCD_CHAR+0x1e8>
	else if (__tmp > 65535)
    23e0:	6b a1       	ldd	r22, Y+35	; 0x23
    23e2:	7c a1       	ldd	r23, Y+36	; 0x24
    23e4:	8d a1       	ldd	r24, Y+37	; 0x25
    23e6:	9e a1       	ldd	r25, Y+38	; 0x26
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <LCD_CHAR+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	6f a1       	ldd	r22, Y+39	; 0x27
    23fa:	78 a5       	ldd	r23, Y+40	; 0x28
    23fc:	89 a5       	ldd	r24, Y+41	; 0x29
    23fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9a a3       	std	Y+34, r25	; 0x22
    241e:	89 a3       	std	Y+33, r24	; 0x21
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <LCD_CHAR+0x1ca>
    2422:	89 e1       	ldi	r24, 0x19	; 25
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	98 a3       	std	Y+32, r25	; 0x20
    2428:	8f 8f       	std	Y+31, r24	; 0x1f
    242a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    242c:	98 a1       	ldd	r25, Y+32	; 0x20
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_CHAR+0x1b8>
    2432:	98 a3       	std	Y+32, r25	; 0x20
    2434:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	89 a1       	ldd	r24, Y+33	; 0x21
    2438:	9a a1       	ldd	r25, Y+34	; 0x22
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9a a3       	std	Y+34, r25	; 0x22
    243e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	89 a1       	ldd	r24, Y+33	; 0x21
    2442:	9a a1       	ldd	r25, Y+34	; 0x22
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <LCD_CHAR+0x1ac>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <LCD_CHAR+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6b a1       	ldd	r22, Y+35	; 0x23
    244c:	7c a1       	ldd	r23, Y+36	; 0x24
    244e:	8d a1       	ldd	r24, Y+37	; 0x25
    2450:	9e a1       	ldd	r25, Y+38	; 0x26
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9a a3       	std	Y+34, r25	; 0x22
    245c:	89 a3       	std	Y+33, r24	; 0x21
    245e:	89 a1       	ldd	r24, Y+33	; 0x21
    2460:	9a a1       	ldd	r25, Y+34	; 0x22
    2462:	9e 8f       	std	Y+30, r25	; 0x1e
    2464:	8d 8f       	std	Y+29, r24	; 0x1d
    2466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_CHAR+0x1f4>
    246e:	9e 8f       	std	Y+30, r25	; 0x1e
    2470:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			PORT(PC,total,charachter);
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	68 e0       	ldi	r22, 0x08	; 8
    2476:	49 ad       	ldd	r20, Y+57	; 0x39
    2478:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e8       	ldi	r26, 0x80	; 128
    2482:	bf e3       	ldi	r27, 0x3F	; 63
    2484:	89 8f       	std	Y+25, r24	; 0x19
    2486:	9a 8f       	std	Y+26, r25	; 0x1a
    2488:	ab 8f       	std	Y+27, r26	; 0x1b
    248a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	69 8d       	ldd	r22, Y+25	; 0x19
    248e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	53 e4       	ldi	r21, 0x43	; 67
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8d 8b       	std	Y+21, r24	; 0x15
    24a6:	9e 8b       	std	Y+22, r25	; 0x16
    24a8:	af 8b       	std	Y+23, r26	; 0x17
    24aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ac:	6d 89       	ldd	r22, Y+21	; 0x15
    24ae:	7e 89       	ldd	r23, Y+22	; 0x16
    24b0:	8f 89       	ldd	r24, Y+23	; 0x17
    24b2:	98 8d       	ldd	r25, Y+24	; 0x18
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <LCD_CHAR+0x258>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <LCD_CHAR+0x2d6>
	else if (__tmp > 65535)
    24ce:	6d 89       	ldd	r22, Y+21	; 0x15
    24d0:	7e 89       	ldd	r23, Y+22	; 0x16
    24d2:	8f 89       	ldd	r24, Y+23	; 0x17
    24d4:	98 8d       	ldd	r25, Y+24	; 0x18
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <LCD_CHAR+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	69 8d       	ldd	r22, Y+25	; 0x19
    24e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
    250e:	0f c0       	rjmp	.+30     	; 0x252e <LCD_CHAR+0x2b8>
    2510:	89 e1       	ldi	r24, 0x19	; 25
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9a 8b       	std	Y+18, r25	; 0x12
    2516:	89 8b       	std	Y+17, r24	; 0x11
    2518:	89 89       	ldd	r24, Y+17	; 0x11
    251a:	9a 89       	ldd	r25, Y+18	; 0x12
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_CHAR+0x2a6>
    2520:	9a 8b       	std	Y+18, r25	; 0x12
    2522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8b 89       	ldd	r24, Y+19	; 0x13
    2526:	9c 89       	ldd	r25, Y+20	; 0x14
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	9c 89       	ldd	r25, Y+20	; 0x14
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <LCD_CHAR+0x29a>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <LCD_CHAR+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6d 89       	ldd	r22, Y+21	; 0x15
    253a:	7e 89       	ldd	r23, Y+22	; 0x16
    253c:	8f 89       	ldd	r24, Y+23	; 0x17
    253e:	98 8d       	ldd	r25, Y+24	; 0x18
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9c 8b       	std	Y+20, r25	; 0x14
    254a:	8b 8b       	std	Y+19, r24	; 0x13
    254c:	8b 89       	ldd	r24, Y+19	; 0x13
    254e:	9c 89       	ldd	r25, Y+20	; 0x14
    2550:	98 8b       	std	Y+16, r25	; 0x10
    2552:	8f 87       	std	Y+15, r24	; 0x0f
    2554:	8f 85       	ldd	r24, Y+15	; 0x0f
    2556:	98 89       	ldd	r25, Y+16	; 0x10
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_CHAR+0x2e2>
    255c:	98 8b       	std	Y+16, r25	; 0x10
    255e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			PORT(EN,OFF);
    2560:	83 e0       	ldi	r24, 0x03	; 3
    2562:	62 e0       	ldi	r22, 0x02	; 2
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	a0 e8       	ldi	r26, 0x80	; 128
    2570:	bf e3       	ldi	r27, 0x3F	; 63
    2572:	8b 87       	std	Y+11, r24	; 0x0b
    2574:	9c 87       	std	Y+12, r25	; 0x0c
    2576:	ad 87       	std	Y+13, r26	; 0x0d
    2578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257a:	6b 85       	ldd	r22, Y+11	; 0x0b
    257c:	7c 85       	ldd	r23, Y+12	; 0x0c
    257e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2580:	9e 85       	ldd	r25, Y+14	; 0x0e
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a e7       	ldi	r20, 0x7A	; 122
    2588:	53 e4       	ldi	r21, 0x43	; 67
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8f 83       	std	Y+7, r24	; 0x07
    2594:	98 87       	std	Y+8, r25	; 0x08
    2596:	a9 87       	std	Y+9, r26	; 0x09
    2598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <LCD_CHAR+0x346>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	3f c0       	rjmp	.+126    	; 0x263a <LCD_CHAR+0x3c4>
	else if (__tmp > 65535)
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	4c f5       	brge	.+82     	; 0x2626 <LCD_CHAR+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <LCD_CHAR+0x3a6>
    25fe:	89 e1       	ldi	r24, 0x19	; 25
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_CHAR+0x394>
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	8d 81       	ldd	r24, Y+5	; 0x05
    2614:	9e 81       	ldd	r25, Y+6	; 0x06
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	69 f7       	brne	.-38     	; 0x25fe <LCD_CHAR+0x388>
    2624:	14 c0       	rjmp	.+40     	; 0x264e <LCD_CHAR+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_CHAR+0x3d0>
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);

	#endif
}
    264e:	e9 96       	adiw	r28, 0x39	; 57
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <LCD_STR>:
//===================================================================
// SEND STRING
void LCD_STR(char *ptr)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <LCD_STR+0x6>
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	0a c0       	rjmp	.+20     	; 0x2684 <LCD_STR+0x24>
	while((*ptr) != '\0')
	{
		LCD_CHAR(*ptr);
    2670:	e9 81       	ldd	r30, Y+1	; 0x01
    2672:	fa 81       	ldd	r31, Y+2	; 0x02
    2674:	80 81       	ld	r24, Z
    2676:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_CHAR>
		ptr++;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
}
//===================================================================
// SEND STRING
void LCD_STR(char *ptr)
{
	while((*ptr) != '\0')
    2684:	e9 81       	ldd	r30, Y+1	; 0x01
    2686:	fa 81       	ldd	r31, Y+2	; 0x02
    2688:	80 81       	ld	r24, Z
    268a:	88 23       	and	r24, r24
    268c:	89 f7       	brne	.-30     	; 0x2670 <LCD_STR+0x10>
	{
		LCD_CHAR(*ptr);
		ptr++;
	}
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <LCD_CLEAR>:
//===================================================================
// CLEAR LCD
void LCD_CLEAR()
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
	LCD_COMMAND(0x01);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <LCD_COMMAND>
}
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <LCD_INT>:

void LCD_INT(int data)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	62 97       	sbiw	r28, 0x12	; 18
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	9a 8b       	std	Y+18, r25	; 0x12
    26c2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26c4:	89 89       	ldd	r24, Y+17	; 0x11
    26c6:	9a 89       	ldd	r25, Y+18	; 0x12
    26c8:	9e 01       	movw	r18, r28
    26ca:	2f 5f       	subi	r18, 0xFF	; 255
    26cc:	3f 4f       	sbci	r19, 0xFF	; 255
    26ce:	b9 01       	movw	r22, r18
    26d0:	4a e0       	ldi	r20, 0x0A	; 10
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	0e 94 75 17 	call	0x2eea	; 0x2eea <itoa>
   LCD_STR(buff); /* Display the string */
    26d8:	ce 01       	movw	r24, r28
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_STR>
}
    26e0:	62 96       	adiw	r28, 0x12	; 18
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <LCD_moveCursor+0x6>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <LCD_moveCursor+0x8>
    26fa:	0f 92       	push	r0
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	8a 83       	std	Y+2, r24	; 0x02
    2702:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row)
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	3d 83       	std	Y+5, r19	; 0x05
    270c:	2c 83       	std	Y+4, r18	; 0x04
    270e:	8c 81       	ldd	r24, Y+4	; 0x04
    2710:	9d 81       	ldd	r25, Y+5	; 0x05
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	31 f0       	breq	.+12     	; 0x2722 <LCD_moveCursor+0x30>
    2716:	2c 81       	ldd	r18, Y+4	; 0x04
    2718:	3d 81       	ldd	r19, Y+5	; 0x05
    271a:	21 30       	cpi	r18, 0x01	; 1
    271c:	31 05       	cpc	r19, r1
    271e:	21 f0       	breq	.+8      	; 0x2728 <LCD_moveCursor+0x36>
    2720:	06 c0       	rjmp	.+12     	; 0x272e <LCD_moveCursor+0x3c>
	{
		case 0:
			lcd_memory_address=col;
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	03 c0       	rjmp	.+6      	; 0x272e <LCD_moveCursor+0x3c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	80 5c       	subi	r24, 0xC0	; 192
    272c:	89 83       	std	Y+1, r24	; 0x01
				break;

	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	80 68       	ori	r24, 0x80	; 128
    2732:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <LCD_COMMAND>
}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <LCD_STR_R_C>:

void LCD_STR_R_C(uint8 row,uint8 col,char txt[])
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	00 d0       	rcall	.+0      	; 0x274c <LCD_STR_R_C+0x6>
    274c:	00 d0       	rcall	.+0      	; 0x274e <LCD_STR_R_C+0x8>
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	89 83       	std	Y+1, r24	; 0x01
    2754:	6a 83       	std	Y+2, r22	; 0x02
    2756:	5c 83       	std	Y+4, r21	; 0x04
    2758:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	6a 81       	ldd	r22, Y+2	; 0x02
    275e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_moveCursor>
	LCD_STR(txt); /* display the string */
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	0e 94 30 13 	call	0x2660	; 0x2660 <LCD_STR>
}
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <PWM_Timer0_Start>:



#include "PWM_TIM0.h"
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	89 83       	std	Y+1, r24	; 0x01
	DDR(PB,P3,OUTPUT);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	63 e0       	ldi	r22, 0x03	; 3
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
	TCNT0=0;
    2792:	e2 e5       	ldi	r30, 0x52	; 82
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	10 82       	st	Z, r1
	OCR0=(uint8)(2.55*duty_cycle);
    2798:	0c e5       	ldi	r16, 0x5C	; 92
    279a:	10 e0       	ldi	r17, 0x00	; 0
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	aa 27       	eor	r26, r26
    27a4:	97 fd       	sbrc	r25, 7
    27a6:	a0 95       	com	r26
    27a8:	ba 2f       	mov	r27, r26
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	23 e3       	ldi	r18, 0x33	; 51
    27bc:	33 e3       	ldi	r19, 0x33	; 51
    27be:	43 e2       	ldi	r20, 0x23	; 35
    27c0:	50 e4       	ldi	r21, 0x40	; 64
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	f8 01       	movw	r30, r16
    27d8:	80 83       	st	Z, r24
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01);
    27da:	e3 e5       	ldi	r30, 0x53	; 83
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	8a e6       	ldi	r24, 0x6A	; 106
    27e0:	80 83       	st	Z, r24

}
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	08 95       	ret

000027ee <SEVEN_SEG>:
 */
#include "SEVEN_SEG.h"


void SEVEN_SEG(uint8 num)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <SEVEN_SEG+0x6>
    27f4:	0f 92       	push	r0
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	89 83       	std	Y+1, r24	; 0x01

DDR(PA,total,OUTPUT);
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	68 e0       	ldi	r22, 0x08	; 8
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
DDR(SEG1,OUTPUT);
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	66 e0       	ldi	r22, 0x06	; 6
    280a:	41 e0       	ldi	r20, 0x01	; 1
    280c:	0e 94 97 08 	call	0x112e	; 0x112e <DDR>
PORT(SEG1,ON);
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	66 e0       	ldi	r22, 0x06	; 6
    2814:	41 e0       	ldi	r20, 0x01	; 1
    2816:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>

	switch(num)
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	3b 83       	std	Y+3, r19	; 0x03
    2822:	2a 83       	std	Y+2, r18	; 0x02
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	9b 81       	ldd	r25, Y+3	; 0x03
    2828:	84 30       	cpi	r24, 0x04	; 4
    282a:	91 05       	cpc	r25, r1
    282c:	09 f4       	brne	.+2      	; 0x2830 <SEVEN_SEG+0x42>
    282e:	e5 c0       	rjmp	.+458    	; 0x29fa <SEVEN_SEG+0x20c>
    2830:	2a 81       	ldd	r18, Y+2	; 0x02
    2832:	3b 81       	ldd	r19, Y+3	; 0x03
    2834:	25 30       	cpi	r18, 0x05	; 5
    2836:	31 05       	cpc	r19, r1
    2838:	ec f4       	brge	.+58     	; 0x2874 <SEVEN_SEG+0x86>
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	91 05       	cpc	r25, r1
    2842:	09 f4       	brne	.+2      	; 0x2846 <SEVEN_SEG+0x58>
    2844:	60 c0       	rjmp	.+192    	; 0x2906 <SEVEN_SEG+0x118>
    2846:	2a 81       	ldd	r18, Y+2	; 0x02
    2848:	3b 81       	ldd	r19, Y+3	; 0x03
    284a:	22 30       	cpi	r18, 0x02	; 2
    284c:	31 05       	cpc	r19, r1
    284e:	2c f4       	brge	.+10     	; 0x285a <SEVEN_SEG+0x6c>
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	9b 81       	ldd	r25, Y+3	; 0x03
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	99 f1       	breq	.+102    	; 0x28be <SEVEN_SEG+0xd0>
    2858:	fb c1       	rjmp	.+1014   	; 0x2c50 <SEVEN_SEG+0x462>
    285a:	2a 81       	ldd	r18, Y+2	; 0x02
    285c:	3b 81       	ldd	r19, Y+3	; 0x03
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	09 f4       	brne	.+2      	; 0x2866 <SEVEN_SEG+0x78>
    2864:	74 c0       	rjmp	.+232    	; 0x294e <SEVEN_SEG+0x160>
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	9b 81       	ldd	r25, Y+3	; 0x03
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	91 05       	cpc	r25, r1
    286e:	09 f4       	brne	.+2      	; 0x2872 <SEVEN_SEG+0x84>
    2870:	92 c0       	rjmp	.+292    	; 0x2996 <SEVEN_SEG+0x1a8>
    2872:	ee c1       	rjmp	.+988    	; 0x2c50 <SEVEN_SEG+0x462>
    2874:	2a 81       	ldd	r18, Y+2	; 0x02
    2876:	3b 81       	ldd	r19, Y+3	; 0x03
    2878:	27 30       	cpi	r18, 0x07	; 7
    287a:	31 05       	cpc	r19, r1
    287c:	09 f4       	brne	.+2      	; 0x2880 <SEVEN_SEG+0x92>
    287e:	53 c1       	rjmp	.+678    	; 0x2b26 <SEVEN_SEG+0x338>
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	9b 81       	ldd	r25, Y+3	; 0x03
    2884:	88 30       	cpi	r24, 0x08	; 8
    2886:	91 05       	cpc	r25, r1
    2888:	6c f4       	brge	.+26     	; 0x28a4 <SEVEN_SEG+0xb6>
    288a:	2a 81       	ldd	r18, Y+2	; 0x02
    288c:	3b 81       	ldd	r19, Y+3	; 0x03
    288e:	25 30       	cpi	r18, 0x05	; 5
    2890:	31 05       	cpc	r19, r1
    2892:	09 f4       	brne	.+2      	; 0x2896 <SEVEN_SEG+0xa8>
    2894:	e4 c0       	rjmp	.+456    	; 0x2a5e <SEVEN_SEG+0x270>
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	9b 81       	ldd	r25, Y+3	; 0x03
    289a:	86 30       	cpi	r24, 0x06	; 6
    289c:	91 05       	cpc	r25, r1
    289e:	09 f4       	brne	.+2      	; 0x28a2 <SEVEN_SEG+0xb4>
    28a0:	10 c1       	rjmp	.+544    	; 0x2ac2 <SEVEN_SEG+0x2d4>
    28a2:	d6 c1       	rjmp	.+940    	; 0x2c50 <SEVEN_SEG+0x462>
    28a4:	2a 81       	ldd	r18, Y+2	; 0x02
    28a6:	3b 81       	ldd	r19, Y+3	; 0x03
    28a8:	28 30       	cpi	r18, 0x08	; 8
    28aa:	31 05       	cpc	r19, r1
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <SEVEN_SEG+0xc2>
    28ae:	6d c1       	rjmp	.+730    	; 0x2b8a <SEVEN_SEG+0x39c>
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	9b 81       	ldd	r25, Y+3	; 0x03
    28b4:	89 30       	cpi	r24, 0x09	; 9
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <SEVEN_SEG+0xce>
    28ba:	99 c1       	rjmp	.+818    	; 0x2bee <SEVEN_SEG+0x400>
    28bc:	c9 c1       	rjmp	.+914    	; 0x2c50 <SEVEN_SEG+0x462>
	{
	case 0:
		PORT(PA,P1,ON);
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	61 e0       	ldi	r22, 0x01	; 1
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P2,ON);
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	62 e0       	ldi	r22, 0x02	; 2
    28cc:	41 e0       	ldi	r20, 0x01	; 1
    28ce:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P3,ON);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	63 e0       	ldi	r22, 0x03	; 3
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P4,ON);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	64 e0       	ldi	r22, 0x04	; 4
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P5,ON);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	65 e0       	ldi	r22, 0x05	; 5
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P6,ON);
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	66 e0       	ldi	r22, 0x06	; 6
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P7,OFF);
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	67 e0       	ldi	r22, 0x07	; 7
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    2904:	a5 c1       	rjmp	.+842    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 1:
		PORT(PA,P1,OFF);
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	61 e0       	ldi	r22, 0x01	; 1
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P2,ON);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	62 e0       	ldi	r22, 0x02	; 2
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P3,ON);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	63 e0       	ldi	r22, 0x03	; 3
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P4,OFF);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	64 e0       	ldi	r22, 0x04	; 4
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P5,OFF);
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	65 e0       	ldi	r22, 0x05	; 5
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P6,OFF);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	66 e0       	ldi	r22, 0x06	; 6
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P7,OFF);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	67 e0       	ldi	r22, 0x07	; 7
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    294c:	81 c1       	rjmp	.+770    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 2:
		PORT(PA,P1,ON);
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	61 e0       	ldi	r22, 0x01	; 1
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P2,ON);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	62 e0       	ldi	r22, 0x02	; 2
    295c:	41 e0       	ldi	r20, 0x01	; 1
    295e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P3,OFF);
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	63 e0       	ldi	r22, 0x03	; 3
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P4,ON);
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	64 e0       	ldi	r22, 0x04	; 4
    2970:	41 e0       	ldi	r20, 0x01	; 1
    2972:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P5,ON);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	65 e0       	ldi	r22, 0x05	; 5
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P6,OFF);
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	66 e0       	ldi	r22, 0x06	; 6
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
		PORT(PA,P7,ON);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	67 e0       	ldi	r22, 0x07	; 7
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PORT>
    2994:	5d c1       	rjmp	.+698    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 3:
		PORTA |= (1<<1);
    2996:	ab e3       	ldi	r26, 0x3B	; 59
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	eb e3       	ldi	r30, 0x3B	; 59
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	82 60       	ori	r24, 0x02	; 2
    29a2:	8c 93       	st	X, r24
		PORTA |= (1<<2);
    29a4:	ab e3       	ldi	r26, 0x3B	; 59
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	eb e3       	ldi	r30, 0x3B	; 59
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	84 60       	ori	r24, 0x04	; 4
    29b0:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    29b2:	ab e3       	ldi	r26, 0x3B	; 59
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	eb e3       	ldi	r30, 0x3B	; 59
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	88 60       	ori	r24, 0x08	; 8
    29be:	8c 93       	st	X, r24
		PORTA |= (1<<4);
    29c0:	ab e3       	ldi	r26, 0x3B	; 59
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	eb e3       	ldi	r30, 0x3B	; 59
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	80 61       	ori	r24, 0x10	; 16
    29cc:	8c 93       	st	X, r24
		PORTA &= ~(1<<5);
    29ce:	ab e3       	ldi	r26, 0x3B	; 59
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	eb e3       	ldi	r30, 0x3B	; 59
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	8f 7d       	andi	r24, 0xDF	; 223
    29da:	8c 93       	st	X, r24
		PORTA &= ~(1<<6);
    29dc:	ab e3       	ldi	r26, 0x3B	; 59
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	eb e3       	ldi	r30, 0x3B	; 59
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	8f 7b       	andi	r24, 0xBF	; 191
    29e8:	8c 93       	st	X, r24
		PORTA |= (1<<7);
    29ea:	ab e3       	ldi	r26, 0x3B	; 59
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	eb e3       	ldi	r30, 0x3B	; 59
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	80 68       	ori	r24, 0x80	; 128
    29f6:	8c 93       	st	X, r24
    29f8:	2b c1       	rjmp	.+598    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 4:
		PORTA &= ~(1<<1);
    29fa:	ab e3       	ldi	r26, 0x3B	; 59
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	eb e3       	ldi	r30, 0x3B	; 59
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	8d 7f       	andi	r24, 0xFD	; 253
    2a06:	8c 93       	st	X, r24
		PORTA |= (1<<2);
    2a08:	ab e3       	ldi	r26, 0x3B	; 59
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	eb e3       	ldi	r30, 0x3B	; 59
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	84 60       	ori	r24, 0x04	; 4
    2a14:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    2a16:	ab e3       	ldi	r26, 0x3B	; 59
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	eb e3       	ldi	r30, 0x3B	; 59
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	88 60       	ori	r24, 0x08	; 8
    2a22:	8c 93       	st	X, r24
		PORTA &= ~(1<<4);
    2a24:	ab e3       	ldi	r26, 0x3B	; 59
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	eb e3       	ldi	r30, 0x3B	; 59
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 7e       	andi	r24, 0xEF	; 239
    2a30:	8c 93       	st	X, r24
		PORTA &= ~(1<<5);
    2a32:	ab e3       	ldi	r26, 0x3B	; 59
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	eb e3       	ldi	r30, 0x3B	; 59
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8f 7d       	andi	r24, 0xDF	; 223
    2a3e:	8c 93       	st	X, r24
		PORTA |= (1<<6);
    2a40:	ab e3       	ldi	r26, 0x3B	; 59
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	eb e3       	ldi	r30, 0x3B	; 59
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	80 64       	ori	r24, 0x40	; 64
    2a4c:	8c 93       	st	X, r24
		PORTA |= (1<<7);
    2a4e:	ab e3       	ldi	r26, 0x3B	; 59
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	eb e3       	ldi	r30, 0x3B	; 59
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 68       	ori	r24, 0x80	; 128
    2a5a:	8c 93       	st	X, r24
    2a5c:	f9 c0       	rjmp	.+498    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 5:
		PORTA |= (1<<1);
    2a5e:	ab e3       	ldi	r26, 0x3B	; 59
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	eb e3       	ldi	r30, 0x3B	; 59
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	82 60       	ori	r24, 0x02	; 2
    2a6a:	8c 93       	st	X, r24
		PORTA &= ~(1<<2);
    2a6c:	ab e3       	ldi	r26, 0x3B	; 59
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	eb e3       	ldi	r30, 0x3B	; 59
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	8b 7f       	andi	r24, 0xFB	; 251
    2a78:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    2a7a:	ab e3       	ldi	r26, 0x3B	; 59
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	eb e3       	ldi	r30, 0x3B	; 59
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	88 60       	ori	r24, 0x08	; 8
    2a86:	8c 93       	st	X, r24
		PORTA |= (1<<4);
    2a88:	ab e3       	ldi	r26, 0x3B	; 59
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	eb e3       	ldi	r30, 0x3B	; 59
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	80 61       	ori	r24, 0x10	; 16
    2a94:	8c 93       	st	X, r24
		PORTA &= ~(1<<5);
    2a96:	ab e3       	ldi	r26, 0x3B	; 59
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	eb e3       	ldi	r30, 0x3B	; 59
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 7d       	andi	r24, 0xDF	; 223
    2aa2:	8c 93       	st	X, r24
		PORTA |= (1<<6);
    2aa4:	ab e3       	ldi	r26, 0x3B	; 59
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	eb e3       	ldi	r30, 0x3B	; 59
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 64       	ori	r24, 0x40	; 64
    2ab0:	8c 93       	st	X, r24
		PORTA |= (1<<7);
    2ab2:	ab e3       	ldi	r26, 0x3B	; 59
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	eb e3       	ldi	r30, 0x3B	; 59
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	80 68       	ori	r24, 0x80	; 128
    2abe:	8c 93       	st	X, r24
    2ac0:	c7 c0       	rjmp	.+398    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 6:
		PORTA |= (1<<1);
    2ac2:	ab e3       	ldi	r26, 0x3B	; 59
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	eb e3       	ldi	r30, 0x3B	; 59
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	82 60       	ori	r24, 0x02	; 2
    2ace:	8c 93       	st	X, r24
		PORTA &= ~(1<<2);
    2ad0:	ab e3       	ldi	r26, 0x3B	; 59
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	eb e3       	ldi	r30, 0x3B	; 59
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	8b 7f       	andi	r24, 0xFB	; 251
    2adc:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    2ade:	ab e3       	ldi	r26, 0x3B	; 59
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	eb e3       	ldi	r30, 0x3B	; 59
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	88 60       	ori	r24, 0x08	; 8
    2aea:	8c 93       	st	X, r24
		PORTA |= (1<<4);
    2aec:	ab e3       	ldi	r26, 0x3B	; 59
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	eb e3       	ldi	r30, 0x3B	; 59
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	80 61       	ori	r24, 0x10	; 16
    2af8:	8c 93       	st	X, r24
		PORTA |= (1<<5);
    2afa:	ab e3       	ldi	r26, 0x3B	; 59
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	eb e3       	ldi	r30, 0x3B	; 59
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	80 62       	ori	r24, 0x20	; 32
    2b06:	8c 93       	st	X, r24
		PORTA |= (1<<6);
    2b08:	ab e3       	ldi	r26, 0x3B	; 59
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	eb e3       	ldi	r30, 0x3B	; 59
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	80 64       	ori	r24, 0x40	; 64
    2b14:	8c 93       	st	X, r24
		PORTA |= (1<<7);
    2b16:	ab e3       	ldi	r26, 0x3B	; 59
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	eb e3       	ldi	r30, 0x3B	; 59
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	80 68       	ori	r24, 0x80	; 128
    2b22:	8c 93       	st	X, r24
    2b24:	95 c0       	rjmp	.+298    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 7:
		PORTA |= (1<<1);
    2b26:	ab e3       	ldi	r26, 0x3B	; 59
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	eb e3       	ldi	r30, 0x3B	; 59
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	82 60       	ori	r24, 0x02	; 2
    2b32:	8c 93       	st	X, r24
		PORTA |= (1<<2);
    2b34:	ab e3       	ldi	r26, 0x3B	; 59
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	eb e3       	ldi	r30, 0x3B	; 59
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	84 60       	ori	r24, 0x04	; 4
    2b40:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    2b42:	ab e3       	ldi	r26, 0x3B	; 59
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	eb e3       	ldi	r30, 0x3B	; 59
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	88 60       	ori	r24, 0x08	; 8
    2b4e:	8c 93       	st	X, r24
		PORTA &= ~(1<<4);
    2b50:	ab e3       	ldi	r26, 0x3B	; 59
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	eb e3       	ldi	r30, 0x3B	; 59
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	8f 7e       	andi	r24, 0xEF	; 239
    2b5c:	8c 93       	st	X, r24
		PORTA &= ~(1<<5);
    2b5e:	ab e3       	ldi	r26, 0x3B	; 59
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	eb e3       	ldi	r30, 0x3B	; 59
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	8f 7d       	andi	r24, 0xDF	; 223
    2b6a:	8c 93       	st	X, r24
		PORTA &= ~(1<<6);
    2b6c:	ab e3       	ldi	r26, 0x3B	; 59
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	eb e3       	ldi	r30, 0x3B	; 59
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8f 7b       	andi	r24, 0xBF	; 191
    2b78:	8c 93       	st	X, r24
		PORTA &= ~(1<<7);
    2b7a:	ab e3       	ldi	r26, 0x3B	; 59
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	eb e3       	ldi	r30, 0x3B	; 59
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	8f 77       	andi	r24, 0x7F	; 127
    2b86:	8c 93       	st	X, r24
    2b88:	63 c0       	rjmp	.+198    	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 8:
		PORTA |= (1<<1);
    2b8a:	ab e3       	ldi	r26, 0x3B	; 59
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	eb e3       	ldi	r30, 0x3B	; 59
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	82 60       	ori	r24, 0x02	; 2
    2b96:	8c 93       	st	X, r24
		PORTA |= (1<<2);
    2b98:	ab e3       	ldi	r26, 0x3B	; 59
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	eb e3       	ldi	r30, 0x3B	; 59
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	84 60       	ori	r24, 0x04	; 4
    2ba4:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    2ba6:	ab e3       	ldi	r26, 0x3B	; 59
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	eb e3       	ldi	r30, 0x3B	; 59
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	88 60       	ori	r24, 0x08	; 8
    2bb2:	8c 93       	st	X, r24
		PORTA |= (1<<4);
    2bb4:	ab e3       	ldi	r26, 0x3B	; 59
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	eb e3       	ldi	r30, 0x3B	; 59
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	80 61       	ori	r24, 0x10	; 16
    2bc0:	8c 93       	st	X, r24
		PORTA |= (1<<5);
    2bc2:	ab e3       	ldi	r26, 0x3B	; 59
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	eb e3       	ldi	r30, 0x3B	; 59
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	80 62       	ori	r24, 0x20	; 32
    2bce:	8c 93       	st	X, r24
		PORTA |= (1<<6);
    2bd0:	ab e3       	ldi	r26, 0x3B	; 59
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	eb e3       	ldi	r30, 0x3B	; 59
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 64       	ori	r24, 0x40	; 64
    2bdc:	8c 93       	st	X, r24
		PORTA |= (1<<7);
    2bde:	ab e3       	ldi	r26, 0x3B	; 59
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	eb e3       	ldi	r30, 0x3B	; 59
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	80 68       	ori	r24, 0x80	; 128
    2bea:	8c 93       	st	X, r24
    2bec:	31 c0       	rjmp	.+98     	; 0x2c50 <SEVEN_SEG+0x462>
		break;
	case 9:
		PORTA |= (1<<1);
    2bee:	ab e3       	ldi	r26, 0x3B	; 59
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	eb e3       	ldi	r30, 0x3B	; 59
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	82 60       	ori	r24, 0x02	; 2
    2bfa:	8c 93       	st	X, r24
		PORTA |= (1<<2);
    2bfc:	ab e3       	ldi	r26, 0x3B	; 59
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	eb e3       	ldi	r30, 0x3B	; 59
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	84 60       	ori	r24, 0x04	; 4
    2c08:	8c 93       	st	X, r24
		PORTA |= (1<<3);
    2c0a:	ab e3       	ldi	r26, 0x3B	; 59
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	eb e3       	ldi	r30, 0x3B	; 59
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	88 60       	ori	r24, 0x08	; 8
    2c16:	8c 93       	st	X, r24
		PORTA &= ~(1<<4);
    2c18:	ab e3       	ldi	r26, 0x3B	; 59
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	eb e3       	ldi	r30, 0x3B	; 59
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	8f 7e       	andi	r24, 0xEF	; 239
    2c24:	8c 93       	st	X, r24
		PORTA &= ~(1<<5);
    2c26:	ab e3       	ldi	r26, 0x3B	; 59
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	eb e3       	ldi	r30, 0x3B	; 59
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	8f 7d       	andi	r24, 0xDF	; 223
    2c32:	8c 93       	st	X, r24
		PORTA |= (1<<6);
    2c34:	ab e3       	ldi	r26, 0x3B	; 59
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	eb e3       	ldi	r30, 0x3B	; 59
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 64       	ori	r24, 0x40	; 64
    2c40:	8c 93       	st	X, r24
		PORTA |= (1<<7);
    2c42:	ab e3       	ldi	r26, 0x3B	; 59
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	eb e3       	ldi	r30, 0x3B	; 59
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	80 68       	ori	r24, 0x80	; 128
    2c4e:	8c 93       	st	X, r24
		break;
	}
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <LM35_getTemperature>:


#include "TEMP_SENSOR_LM35.h"

uint8 LM35_getTemperature(void)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	0f 92       	push	r0
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2c66:	19 82       	std	Y+1, r1	; 0x01
	//ADC_INIT (&adc_type);
	ADC_READ(ADC2);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <ADC_READ>
	/* Calculate the temperature from the ADC value*/
    temp_value = (uint8)(((uint32)ADC_RES*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2c6e:	80 91 d3 01 	lds	r24, 0x01D3
    2c72:	90 91 d4 01 	lds	r25, 0x01D4
    2c76:	cc 01       	movw	r24, r24
    2c78:	a0 e0       	ldi	r26, 0x00	; 0
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	26 e9       	ldi	r18, 0x96	; 150
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__mulsi3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	2a e0       	ldi	r18, 0x0A	; 10
    2ca2:	37 ed       	ldi	r19, 0xD7	; 215
    2ca4:	43 e2       	ldi	r20, 0x23	; 35
    2ca6:	50 e4       	ldi	r21, 0x40	; 64
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 ed       	ldi	r19, 0xD0	; 208
    2cb8:	4f eb       	ldi	r20, 0xBF	; 191
    2cba:	54 e4       	ldi	r21, 0x44	; 68
    2cbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	return temp_value;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <main>:
#include "DC_MOTOR.h"
#include "TEMP_SENSOR_LM35.h"
#include "ADC.h"

int main()
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	29 97       	sbiw	r28, 0x09	; 9
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
	ADC_TYPE adc_type ={INTERNAL,PS_8,POOL};
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	02 96       	adiw	r24, 0x02	; 2
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	ee ec       	ldi	r30, 0xCE	; 206
    2cfa:	f1 e0       	ldi	r31, 0x01	; 1
    2cfc:	f8 87       	std	Y+8, r31	; 0x08
    2cfe:	ef 83       	std	Y+7, r30	; 0x07
    2d00:	f3 e0       	ldi	r31, 0x03	; 3
    2d02:	f9 87       	std	Y+9, r31	; 0x09
    2d04:	ef 81       	ldd	r30, Y+7	; 0x07
    2d06:	f8 85       	ldd	r31, Y+8	; 0x08
    2d08:	00 80       	ld	r0, Z
    2d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d0c:	98 85       	ldd	r25, Y+8	; 0x08
    2d0e:	01 96       	adiw	r24, 0x01	; 1
    2d10:	98 87       	std	Y+8, r25	; 0x08
    2d12:	8f 83       	std	Y+7, r24	; 0x07
    2d14:	ed 81       	ldd	r30, Y+5	; 0x05
    2d16:	fe 81       	ldd	r31, Y+6	; 0x06
    2d18:	00 82       	st	Z, r0
    2d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	99 85       	ldd	r25, Y+9	; 0x09
    2d26:	91 50       	subi	r25, 0x01	; 1
    2d28:	99 87       	std	Y+9, r25	; 0x09
    2d2a:	e9 85       	ldd	r30, Y+9	; 0x09
    2d2c:	ee 23       	and	r30, r30
    2d2e:	51 f7       	brne	.-44     	; 0x2d04 <main+0x28>
	uint8 Tem=0;
    2d30:	19 82       	std	Y+1, r1	; 0x01
	LCD_INIT();
    2d32:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <LCD_INIT>
	DC_MOTOR_INIT();
    2d36:	0e 94 29 08 	call	0x1052	; 0x1052 <DC_MOTOR_INIT>
	ADC_INIT(&adc_type);
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	02 96       	adiw	r24, 0x02	; 2
    2d3e:	0e 94 95 07 	call	0xf2a	; 0xf2a <ADC_INIT>
	LCD_STR_R_C(0,0,"FAN IS OFF");
    2d42:	20 e6       	ldi	r18, 0x60	; 96
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	a9 01       	movw	r20, r18
    2d4c:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"TEMP = ");
    2d50:	2b e6       	ldi	r18, 0x6B	; 107
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	a9 01       	movw	r20, r18
    2d5a:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>
	LCD_STR_R_C(1,13,"C");
    2d5e:	23 e7       	ldi	r18, 0x73	; 115
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	6d e0       	ldi	r22, 0x0D	; 13
    2d66:	a9 01       	movw	r20, r18
    2d68:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>

	while(1)
	{
				Tem=LM35_getTemperature();
    2d6c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <LM35_getTemperature>
    2d70:	89 83       	std	Y+1, r24	; 0x01
				LCD_moveCursor(1,9);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	69 e0       	ldi	r22, 0x09	; 9
    2d76:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_moveCursor>
				LCD_INT(Tem);
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_INT>
					LCD_STR_R_C(1,0,"TEMP. UNDER ZERO C");

				}
				else
				{
					if(Tem<30)
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	8e 31       	cpi	r24, 0x1E	; 30
    2d88:	60 f4       	brcc	.+24     	; 0x2da2 <main+0xc6>
					{
						DC_MOTOR(m_off,0);
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	0e 94 44 08 	call	0x1088	; 0x1088 <DC_MOTOR>
						LCD_STR_R_C(0,0,"FAN IS OFF      ");
    2d92:	25 e7       	ldi	r18, 0x75	; 117
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	a9 01       	movw	r20, r18
    2d9c:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>
    2da0:	41 c0       	rjmp	.+130    	; 0x2e24 <main+0x148>
					}
					else if (Tem>=30 && Tem<60)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	8e 31       	cpi	r24, 0x1E	; 30
    2da6:	78 f0       	brcs	.+30     	; 0x2dc6 <main+0xea>
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	8c 33       	cpi	r24, 0x3C	; 60
    2dac:	60 f4       	brcc	.+24     	; 0x2dc6 <main+0xea>
					{
						DC_MOTOR(m_on_cw,25);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	69 e1       	ldi	r22, 0x19	; 25
    2db2:	0e 94 44 08 	call	0x1088	; 0x1088 <DC_MOTOR>
						LCD_STR_R_C(0,0,"FAN IS ON, S1  ");
    2db6:	26 e8       	ldi	r18, 0x86	; 134
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	60 e0       	ldi	r22, 0x00	; 0
    2dbe:	a9 01       	movw	r20, r18
    2dc0:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>
    2dc4:	2f c0       	rjmp	.+94     	; 0x2e24 <main+0x148>

					}
					else if (Tem>=60 && Tem<90)
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	8c 33       	cpi	r24, 0x3C	; 60
    2dca:	78 f0       	brcs	.+30     	; 0x2dea <main+0x10e>
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	8a 35       	cpi	r24, 0x5A	; 90
    2dd0:	60 f4       	brcc	.+24     	; 0x2dea <main+0x10e>
					{
						DC_MOTOR(m_on_cw,50);
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	62 e3       	ldi	r22, 0x32	; 50
    2dd6:	0e 94 44 08 	call	0x1088	; 0x1088 <DC_MOTOR>
						LCD_STR_R_C(0,0,"FAN IS ON, S2  ");
    2dda:	26 e9       	ldi	r18, 0x96	; 150
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	a9 01       	movw	r20, r18
    2de4:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>
    2de8:	1d c0       	rjmp	.+58     	; 0x2e24 <main+0x148>

					}
					else if (Tem>=90 && Tem<120)
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	8a 35       	cpi	r24, 0x5A	; 90
    2dee:	78 f0       	brcs	.+30     	; 0x2e0e <main+0x132>
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	88 37       	cpi	r24, 0x78	; 120
    2df4:	60 f4       	brcc	.+24     	; 0x2e0e <main+0x132>
					{
						DC_MOTOR(m_on_cw,75);
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	6b e4       	ldi	r22, 0x4B	; 75
    2dfa:	0e 94 44 08 	call	0x1088	; 0x1088 <DC_MOTOR>
						LCD_STR_R_C(0,0,"FAN IS ON, S3  ");
    2dfe:	26 ea       	ldi	r18, 0xA6	; 166
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	a9 01       	movw	r20, r18
    2e08:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>
    2e0c:	0b c0       	rjmp	.+22     	; 0x2e24 <main+0x148>

					}
					else
					{
						DC_MOTOR(m_on_cw,100);
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	64 e6       	ldi	r22, 0x64	; 100
    2e12:	0e 94 44 08 	call	0x1088	; 0x1088 <DC_MOTOR>
						LCD_STR_R_C(0,0,"FAN IS ON, S4  ");
    2e16:	26 eb       	ldi	r18, 0xB6	; 182
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	a9 01       	movw	r20, r18
    2e20:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_STR_R_C>

					}
					LCD_moveCursor(1,9);
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	69 e0       	ldi	r22, 0x09	; 9
    2e28:	0e 94 79 13 	call	0x26f2	; 0x26f2 <LCD_moveCursor>
					LCD_INT(Tem);
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_INT>
					LCD_CHAR(' ');
    2e36:	80 e2       	ldi	r24, 0x20	; 32
    2e38:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_CHAR>
    2e3c:	97 cf       	rjmp	.-210    	; 0x2d6c <main+0x90>

00002e3e <__mulsi3>:
    2e3e:	62 9f       	mul	r22, r18
    2e40:	d0 01       	movw	r26, r0
    2e42:	73 9f       	mul	r23, r19
    2e44:	f0 01       	movw	r30, r0
    2e46:	82 9f       	mul	r24, r18
    2e48:	e0 0d       	add	r30, r0
    2e4a:	f1 1d       	adc	r31, r1
    2e4c:	64 9f       	mul	r22, r20
    2e4e:	e0 0d       	add	r30, r0
    2e50:	f1 1d       	adc	r31, r1
    2e52:	92 9f       	mul	r25, r18
    2e54:	f0 0d       	add	r31, r0
    2e56:	83 9f       	mul	r24, r19
    2e58:	f0 0d       	add	r31, r0
    2e5a:	74 9f       	mul	r23, r20
    2e5c:	f0 0d       	add	r31, r0
    2e5e:	65 9f       	mul	r22, r21
    2e60:	f0 0d       	add	r31, r0
    2e62:	99 27       	eor	r25, r25
    2e64:	72 9f       	mul	r23, r18
    2e66:	b0 0d       	add	r27, r0
    2e68:	e1 1d       	adc	r30, r1
    2e6a:	f9 1f       	adc	r31, r25
    2e6c:	63 9f       	mul	r22, r19
    2e6e:	b0 0d       	add	r27, r0
    2e70:	e1 1d       	adc	r30, r1
    2e72:	f9 1f       	adc	r31, r25
    2e74:	bd 01       	movw	r22, r26
    2e76:	cf 01       	movw	r24, r30
    2e78:	11 24       	eor	r1, r1
    2e7a:	08 95       	ret

00002e7c <__prologue_saves__>:
    2e7c:	2f 92       	push	r2
    2e7e:	3f 92       	push	r3
    2e80:	4f 92       	push	r4
    2e82:	5f 92       	push	r5
    2e84:	6f 92       	push	r6
    2e86:	7f 92       	push	r7
    2e88:	8f 92       	push	r8
    2e8a:	9f 92       	push	r9
    2e8c:	af 92       	push	r10
    2e8e:	bf 92       	push	r11
    2e90:	cf 92       	push	r12
    2e92:	df 92       	push	r13
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	ca 1b       	sub	r28, r26
    2ea6:	db 0b       	sbc	r29, r27
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	09 94       	ijmp

00002eb4 <__epilogue_restores__>:
    2eb4:	2a 88       	ldd	r2, Y+18	; 0x12
    2eb6:	39 88       	ldd	r3, Y+17	; 0x11
    2eb8:	48 88       	ldd	r4, Y+16	; 0x10
    2eba:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ebc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ebe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ec0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ec2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ec4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ec6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ec8:	c8 84       	ldd	r12, Y+8	; 0x08
    2eca:	df 80       	ldd	r13, Y+7	; 0x07
    2ecc:	ee 80       	ldd	r14, Y+6	; 0x06
    2ece:	fd 80       	ldd	r15, Y+5	; 0x05
    2ed0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ed2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ed4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ed6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ed8:	ce 0f       	add	r28, r30
    2eda:	d1 1d       	adc	r29, r1
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	ed 01       	movw	r28, r26
    2ee8:	08 95       	ret

00002eea <itoa>:
    2eea:	fb 01       	movw	r30, r22
    2eec:	9f 01       	movw	r18, r30
    2eee:	e8 94       	clt
    2ef0:	42 30       	cpi	r20, 0x02	; 2
    2ef2:	c4 f0       	brlt	.+48     	; 0x2f24 <itoa+0x3a>
    2ef4:	45 32       	cpi	r20, 0x25	; 37
    2ef6:	b4 f4       	brge	.+44     	; 0x2f24 <itoa+0x3a>
    2ef8:	4a 30       	cpi	r20, 0x0A	; 10
    2efa:	29 f4       	brne	.+10     	; 0x2f06 <itoa+0x1c>
    2efc:	97 fb       	bst	r25, 7
    2efe:	1e f4       	brtc	.+6      	; 0x2f06 <itoa+0x1c>
    2f00:	90 95       	com	r25
    2f02:	81 95       	neg	r24
    2f04:	9f 4f       	sbci	r25, 0xFF	; 255
    2f06:	64 2f       	mov	r22, r20
    2f08:	77 27       	eor	r23, r23
    2f0a:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__udivmodhi4>
    2f0e:	80 5d       	subi	r24, 0xD0	; 208
    2f10:	8a 33       	cpi	r24, 0x3A	; 58
    2f12:	0c f0       	brlt	.+2      	; 0x2f16 <itoa+0x2c>
    2f14:	89 5d       	subi	r24, 0xD9	; 217
    2f16:	81 93       	st	Z+, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	a1 f7       	brne	.-24     	; 0x2f06 <itoa+0x1c>
    2f1e:	16 f4       	brtc	.+4      	; 0x2f24 <itoa+0x3a>
    2f20:	5d e2       	ldi	r21, 0x2D	; 45
    2f22:	51 93       	st	Z+, r21
    2f24:	10 82       	st	Z, r1
    2f26:	c9 01       	movw	r24, r18
    2f28:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <strrev>

00002f2c <strrev>:
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	fc 01       	movw	r30, r24
    2f30:	67 2f       	mov	r22, r23
    2f32:	71 91       	ld	r23, Z+
    2f34:	77 23       	and	r23, r23
    2f36:	e1 f7       	brne	.-8      	; 0x2f30 <strrev+0x4>
    2f38:	32 97       	sbiw	r30, 0x02	; 2
    2f3a:	04 c0       	rjmp	.+8      	; 0x2f44 <strrev+0x18>
    2f3c:	7c 91       	ld	r23, X
    2f3e:	6d 93       	st	X+, r22
    2f40:	70 83       	st	Z, r23
    2f42:	62 91       	ld	r22, -Z
    2f44:	ae 17       	cp	r26, r30
    2f46:	bf 07       	cpc	r27, r31
    2f48:	c8 f3       	brcs	.-14     	; 0x2f3c <strrev+0x10>
    2f4a:	08 95       	ret

00002f4c <__udivmodhi4>:
    2f4c:	aa 1b       	sub	r26, r26
    2f4e:	bb 1b       	sub	r27, r27
    2f50:	51 e1       	ldi	r21, 0x11	; 17
    2f52:	07 c0       	rjmp	.+14     	; 0x2f62 <__udivmodhi4_ep>

00002f54 <__udivmodhi4_loop>:
    2f54:	aa 1f       	adc	r26, r26
    2f56:	bb 1f       	adc	r27, r27
    2f58:	a6 17       	cp	r26, r22
    2f5a:	b7 07       	cpc	r27, r23
    2f5c:	10 f0       	brcs	.+4      	; 0x2f62 <__udivmodhi4_ep>
    2f5e:	a6 1b       	sub	r26, r22
    2f60:	b7 0b       	sbc	r27, r23

00002f62 <__udivmodhi4_ep>:
    2f62:	88 1f       	adc	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	5a 95       	dec	r21
    2f68:	a9 f7       	brne	.-22     	; 0x2f54 <__udivmodhi4_loop>
    2f6a:	80 95       	com	r24
    2f6c:	90 95       	com	r25
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	08 95       	ret

00002f74 <_exit>:
    2f74:	f8 94       	cli

00002f76 <__stop_program>:
    2f76:	ff cf       	rjmp	.-2      	; 0x2f76 <__stop_program>
